cscope 15 $HOME/Desktop/hao_dance/hw7 -q 0000000402 0000034419
	@src/cmd/cmdCharDef.h

8 #i‚de‡
CMD_CHAR_DEF_H


9 
	#CMD_CHAR_DEF_H


	)

11 
	~<˛imôs
>

15 
	#TA_LINE_BEGIN_KEY
 1

	)

16 
	#TA_LINE_END_KEY
 5

	)

17 
	#TA_INPUT_END_KEY
 4

	)

18 
	#TA_TAB_KEY
 ('\t')

	)

19 
	#TA_NEWLINE_KEY
 ('\n')

	)

20 
	#TA_ESC_KEY
 27

	)

21 
	#TA_BACK_SPACE_KEY
 127

	)

22 
	#TA_ARROW_KEY_FLAG
 (1 << 8)

	)

23 
	#TA_ARROW_KEY_INT
 91

	)

24 
	#TA_ARROW_UP_KEY
 (65 + 
TA_ARROW_KEY_FLAG
)

	)

25 
	#TA_ARROW_DOWN_KEY
 (66 + 
TA_ARROW_KEY_FLAG
)

	)

26 
	#TA_ARROW_RIGHT_KEY
 (67 + 
TA_ARROW_KEY_FLAG
)

	)

27 
	#TA_ARROW_LEFT_KEY
 (68 + 
TA_ARROW_KEY_FLAG
)

	)

28 
	#TA_ARROW_KEY_BEGIN
 
TA_ARROW_UP_KEY


	)

29 
	#TA_ARROW_KEY_END
 
TA_ARROW_LEFT_KEY


	)

30 
	#TA_MOD_KEY_FLAG
 (1 << 9)

	)

31 
	#TA_MOD_KEY_INT
 91

	)

32 
	#TA_HOME_KEY
 (49 + 
TA_MOD_KEY_FLAG
)

	)

33 
	#TA_INSERT_KEY
 (50 + 
TA_MOD_KEY_FLAG
)

	)

34 
	#TA_DELETE_KEY
 (51 + 
TA_MOD_KEY_FLAG
)

	)

35 
	#TA_END_KEY
 (52 + 
TA_MOD_KEY_FLAG
)

	)

36 
	#TA_PG_UP_KEY
 (53 + 
TA_MOD_KEY_FLAG
)

	)

37 
	#TA_PG_DOWN_KEY
 (54 + 
TA_MOD_KEY_FLAG
)

	)

38 
	#TA_MOD_KEY_BEGIN
 
TA_HOME_KEY


	)

39 
	#TA_MOD_KEY_END
 
TA_PG_DOWN_KEY


	)

40 
	#TA_MOD_KEY_DUMMY
 126

	)

41 
	#TA_UNDEFINED_KEY
 
INT_MAX


	)

42 
	#TA_BEEP_CHAR
 7

	)

43 
	#TA_BACK_SPACE_CHAR
 8

	)

46 #i‚de‡
TA_KB_SETTING


55 
	eP¨£Ch¨


59 
	mLINE_BEGIN_KEY
 = 1,

60 
	mLINE_END_KEY
 = 5,

61 
	mINPUT_END_KEY
 = 4,

62 
	mTAB_KEY
 = ('\t'),

63 
	mNEWLINE_KEY
 = ('\n'),

64 
	mESC_KEY
 = 27,

79 
	mBACK_SPACE_KEY
 = 127,

83 
	mARROW_KEY_FLAG
 = 1 << 8,

84 
	mARROW_KEY_INT
 = 91,

85 
	mARROW_UP_KEY
 = 65 + 
ARROW_KEY_FLAG
,

86 
	mARROW_DOWN_KEY
 = 66 + 
ARROW_KEY_FLAG
,

87 
	mARROW_RIGHT_KEY
 = 67 + 
ARROW_KEY_FLAG
,

88 
	mARROW_LEFT_KEY
 = 68 + 
ARROW_KEY_FLAG
,

89 
	mARROW_KEY_BEGIN
 = 
ARROW_UP_KEY
,

90 
	mARROW_KEY_END
 = 
ARROW_LEFT_KEY
,

96 
	mMOD_KEY_FLAG
 = 1 << 9,

97 
	mMOD_KEY_INT
 = 91,

98 
	mHOME_KEY
 = 49 + 
MOD_KEY_FLAG
,

99 
	mINSERT_KEY
 = 50 + 
MOD_KEY_FLAG
,

100 
	mDELETE_KEY
 = 51 + 
MOD_KEY_FLAG
,

101 
	mEND_KEY
 = 52 + 
MOD_KEY_FLAG
,

102 
	mPG_UP_KEY
 = 53 + 
MOD_KEY_FLAG
,

103 
	mPG_DOWN_KEY
 = 54 + 
MOD_KEY_FLAG
,

104 
	mMOD_KEY_BEGIN
 = 
HOME_KEY
,

105 
	mMOD_KEY_END
 = 
PG_DOWN_KEY
,

106 
	mMOD_KEY_DUMMY
 = 126,

110 
	mUNDEFINED_KEY
 = 
INT_MAX
,

113 
	mBEEP_CHAR
 = 7,

114 
	mBACK_SPACE_CHAR
 = 8,

117 
	mPARSE_CHAR_END


127 
	eP¨£Ch¨


131 
	mLINE_BEGIN_KEY
 = 
TA_LINE_BEGIN_KEY
,

132 
	mLINE_END_KEY
 = 
TA_LINE_END_KEY
,

133 
	mINPUT_END_KEY
 = 
TA_INPUT_END_KEY
,

134 
	mTAB_KEY
 = 
TA_TAB_KEY
,

135 
	mNEWLINE_KEY
 = 
TA_NEWLINE_KEY
,

136 
	mESC_KEY
 = 
TA_ESC_KEY
,

151 
	mBACK_SPACE_KEY
 = 
TA_BACK_SPACE_KEY
,

155 
	mARROW_KEY_FLAG
 = 
TA_ARROW_KEY_FLAG
,

156 
	mARROW_KEY_INT
 = 
TA_ARROW_KEY_INT
,

157 
	mARROW_UP_KEY
 = 
TA_ARROW_UP_KEY
,

158 
	mARROW_DOWN_KEY
 = 
TA_ARROW_DOWN_KEY
,

159 
	mARROW_RIGHT_KEY
 = 
TA_ARROW_RIGHT_KEY
,

160 
	mARROW_LEFT_KEY
 = 
TA_ARROW_LEFT_KEY
,

161 
	mARROW_KEY_BEGIN
 = 
TA_ARROW_KEY_BEGIN
,

162 
	mARROW_KEY_END
 = 
TA_ARROW_KEY_END
,

168 
	mMOD_KEY_FLAG
 = 
TA_MOD_KEY_FLAG
,

169 
	mMOD_KEY_INT
 = 
TA_MOD_KEY_INT
,

170 
	mHOME_KEY
 = 
TA_HOME_KEY
,

171 
	mINSERT_KEY
 = 
TA_INSERT_KEY
,

172 
	mDELETE_KEY
 = 
TA_DELETE_KEY
,

173 
	mEND_KEY
 = 
TA_END_KEY
,

174 
	mPG_UP_KEY
 = 
TA_PG_UP_KEY
,

175 
	mPG_DOWN_KEY
 = 
TA_PG_DOWN_KEY
,

176 
	mMOD_KEY_BEGIN
 = 
TA_MOD_KEY_BEGIN
,

177 
	mMOD_KEY_END
 = 
TA_MOD_KEY_END
,

178 
	mMOD_KEY_DUMMY
 = 
TA_MOD_KEY_DUMMY
,

182 
	mUNDEFINED_KEY
 = 
TA_UNDEFINED_KEY
,

185 
	mBEEP_CHAR
 = 
TA_BEEP_CHAR
,

186 
	mBACK_SPACE_CHAR
 = 
TA_BACK_SPACE_CHAR
,

189 
	mPARSE_CHAR_END


	@src/cmd/cmdParser.h

8 #i‚de‡
CMD_PARSER_H


9 
	#CMD_PARSER_H


	)

11 
	~<io°ªam
>

12 
	~<f°ªam
>

13 
	~<°rög
>

14 
	~<ve˘‹
>

15 
	~<m≠
>

16 
	~<°ack
>

18 
	~"cmdCh¨Def.h
"

20 
usög
 
«me•a˚
 
	g°d
;

26 
˛ass
 
	gCmdExec
;

27 
˛ass
 
	gCmdP¨£r
;

33 
CmdP¨£r
* 
cmdMgr
;

39 
	eCmdExecSètus


41 
	mCMD_EXEC_DONE
 = 0,

42 
	mCMD_EXEC_ERROR
 = 1,

43 
	mCMD_EXEC_QUIT
 = 2,

44 
	mCMD_EXEC_NOP
 = 3,

47 
	mCMD_EXEC_TOT


50 
	eCmdO±i⁄Eº‹


52 
	mCMD_OPT_MISSING
 = 0,

53 
	mCMD_OPT_EXTRA
 = 1,

54 
	mCMD_OPT_ILLEGAL
 = 2,

55 
	mCMD_OPT_FOPEN_FAIL
 = 3,

58 
	mCMD_OPT_ERROR_TOT


66 ˛as†
	cCmdExec


68 
	mpublic
:

69 
	$CmdExec
() {}

70 
vútuÆ
 ~
	$CmdExec
(Ë{
	}
}

72 
vútuÆ
 
CmdExecSètus
 
exec
(c⁄° 
°rög
&) = 0;

73 
vútuÆ
 
	$ußge
(
o°ªam
&) const = 0;

74 
vútuÆ
 
	$hñp
() const = 0;

76 
	$£tO±Cmd
(c⁄° 
°rög
& 
°r
Ë{ 
_›tCmd
 = så; 
	}
}

77 
boﬁ
 
	$checkO±Cmd
(c⁄° 
°rög
& 
check
) const;

78 c⁄° 
°rög
& 
	$gëO±Cmd
(Ëc⁄° {  
_›tCmd
; 
	}
}

80 
	g¥Ÿe˘ed
:

81 
boﬁ
 
	$ÀxSögÀO±i⁄
(c⁄° 
°rög
&, såög&, 
boﬁ
 
›ti⁄Æ
 = 
åue
) const;

82 
boﬁ
 
	`ÀxO±i⁄s
(c⁄° 
°rög
&, 
ve˘‹
<°rög>&, 
size_t
 
nO±s
 = 0) const;

83 
CmdExecSètus
 
	$îr‹O±i⁄
(
CmdO±i⁄Eº‹
 
îr
, c⁄° 
°rög
& 
›t
) const;

85 
¥iv©e
:

86 
°rög
 
_›tCmd
;

87 
	}
};

89 
	#CmdCœss
(
T
) \

90 
˛ass
 
T
: 
public
 
CmdExec
 \

92 
public
: \

93 
	`T
() {} \

94 ~
	`T
() {} \

95 
CmdExecSètus
 
	`exec
(c⁄° 
°rög
& 
›ti⁄
); \

96 
	`ußge
(
o°ªam
& 
os
) const; \

97 
	`hñp
() const; \

98 }

	)

105 ˛as†
	cCmdP¨£r


107 
	#READ_BUF_SIZE
 65536

	)

108 
	#PG_OFFSET
 10

	)

110 
	mm≠
<c⁄° 
	t°rög
, 
	tCmdExec
*> 
	tCmdM≠
;

111 
	m∑ú
<c⁄° 
	t°rög
, 
	tCmdExec
*> 
	tCmdRegPaú
;

113 
	mpublic
:

114 
	$CmdP¨£r
(c⁄° 
°rög
& 
p
Ë: 
	`_¥om±
’), 
	`_dofûe
(0),

115 
	`_ªadBufPå
(
_ªadBuf
), 
	`_ªadBufEnd
(_readBuf),

116 
	`_hi°‹yIdx
(0), 
	`_èbPªssCou¡
(0), 
	$_ãmpCmdSt‹ed
(
Ál£
) {}

117 
vútuÆ
 ~
	$CmdP¨£r
(Ë{
	}
}

119 
boﬁ
 
›íDofûe
(c⁄° 
°rög
& 
dof
);

120 
˛o£Dofûe
();

122 
boﬁ
 
ªgCmd
(c⁄° 
°rög
&, , 
CmdExec
*);

123 
CmdExecSètus
 
execO√Cmd
();

124 
	$¥ötHñps
() const;

127 
	`¥ötHi°‹y
(
nPröt
 = -1) const;

128 
CmdExec
* 
	`gëCmd
(
°rög
);

130 
¥iv©e
:

132 
	$ª£tBufAndPrötProm±
() {

133 
_ªadBufPå
 = 
_ªadBufEnd
 = 
_ªadBuf
;

134 *
_ªadBufPå
 = 0;

135 
_èbPªssCou¡
 = 0;

136 
	`¥ötProm±
();

137 
	}
}

138 
P¨£Ch¨
 
	$gëCh¨
(
i°ªam
&) const;

139 
boﬁ
 
	`ªadCmd
(
i°ªam
&);

140 
CmdExec
* 
	`∑r£Cmd
(
°rög
&);

141 
	`li°Cmd
(c⁄° 
°rög
&);

142 
boﬁ
 
	`li°CmdDú
(c⁄° 
°rög
&);

143 
	$¥ötProm±
(Ëc⁄° { 
cout
 << 
_¥om±
; 
	}
}

144 
boﬁ
 
pushDofûe
();

145 
boﬁ
 
p›Dofûe
();

148 
boﬁ
 
moveBufPå
(* const);

149 
boﬁ
 
dñëeCh¨
();

150 
ö£πCh¨
(, = 1);

151 
dñëeLöe
();

152 
ª¥ötCmd
();

153 
moveToHi°‹y
(
ödex
);

154 
boﬁ
 
addHi°‹y
();

155 
ªåõveHi°‹y
();

156 #ifde‡
TA_KB_SETTING


157 
	$èTe°O∆y
(Ë{
	}
}

161 c⁄° 
°rög
 
	g_¥om±
;

162 
if°ªam
* 
	g_dofûe
;

163 
	g_ªadBuf
[
READ_BUF_SIZE
];

165 * 
	g_ªadBufPå
;

167 * 
	g_ªadBufEnd
;

169 
	gve˘‹
<
	g°rög
> 
	g_hi°‹y
;

170 
	g_hi°‹yIdx
;

174 
size_t
 
	g_èbPªssCou¡
;

175 
boﬁ
 
	g_ãmpCmdSt‹ed
;

179 
CmdM≠
 
	g_cmdM≠
;

180 
	g°ack
<
	gif°ªam
*> 
	g_dofûeSèck
;

	@src/main/main.cpp

9 
	~<c°dlib
>

10 
	~"utû.h
"

11 
	~"cmdP¨£r.h
"

13 
usög
 
«me•a˚
 
	g°d
;

18 
CmdP¨£r
* 
	gcmdMgr
 = 
√w
 CmdParser("task> ");

20 
boﬁ
 
öôComm⁄Cmd
();

21 
boﬁ
 
öôTaskCmd
();

24 
	$ußge
()

26 
cout
 << "Ußge:ÅaskMg∏[ -Fûê< doFûê> ]" << 
ídl
;

27 
	}
}

30 
	$myexô
()

32 
	`ußge
();

33 
	`exô
(-1);

34 
	}
}

37 
	$maö
(
¨gc
, ** 
¨gv
)

39 
myUßge
.
	`ª£t
();

41 
if°ªam
 
dof
;

43 i‡(
¨gc
 == 3) {

44 i‡(
	`mySåNCmp
("-Fûe", 
¨gv
[1], 2) == 0) {

45 i‡(!
cmdMgr
->
	`›íDofûe
(
¨gv
[2])) {

46 
˚º
 << "Eº‹: c™nŸ o≥¿fûê\"" << 
¨gv
[2] << "\"!!\n";

47 
	`myexô
();

51 
˚º
 << "Eº‹: unknow¿¨gumíà\"" << 
¨gv
[1] << "\"!!\n";

52 
	`myexô
();

55 i‡(
¨gc
 != 1) {

56 
˚º
 << "Eº‹: iŒegÆÇumbî o‡¨gumíà(" << 
¨gc
 << ")!!\n";

57 
	`myexô
();

60 i‡(!
	`öôComm⁄Cmd
(Ë|| !
	`öôTaskCmd
())

63 
CmdExecSètus
 
°©us
 = 
CMD_EXEC_DONE
;

64 
°©us
 !
CMD_EXEC_QUIT
) {

65 
°©us
 = 
cmdMgr
->
	`execO√Cmd
();

66 
cout
 << 
ídl
;

70 
	}
}

	@src/task/taskCmd.cpp

9 
	~<ˇs£π
>

10 
	~<io°ªam
>

11 
	~<iom™ù
>

12 
	~"èskMgr.h
"

13 
	~"èskCmd.h
"

14 
	~"utû.h
"

16 
usög
 
«me•a˚
 
	g°d
;

18 
TaskMgr
* 
èskMgr
;

20 
boﬁ


21 
	$öôTaskCmd
()

23 i‡(!(
cmdMgr
->
	`ªgCmd
("TASKInô", 5, 
√w
 
TaskInôCmd
) &&

24 
cmdMgr
->
	`ªgCmd
("TASKNew", 5, 
√w
 
TaskNewCmd
) &&

25 
cmdMgr
->
	`ªgCmd
("TASKRemove", 5, 
√w
 
TaskRemoveCmd
) &&

26 
cmdMgr
->
	`ªgCmd
("TASKQuîy", 5, 
√w
 
TaskQuîyCmd
) &&

27 
cmdMgr
->
	`ªgCmd
("TASKAssign", 5, 
√w
 
TaskAssignCmd
)

29 
˚º
 << "Regi°îög \"èsk\" comm™d†Áûs...Éxôög" << 
ídl
;

30  
Ál£
;

32  
åue
;

33 
	}
}

38 
CmdExecSètus


39 
	gTaskInôCmd
::
	$exec
(c⁄° 
°rög
& 
›ti⁄
)

42 
°rög
 
tokí
;

43 i‡(!
CmdExec
::
	`ÀxSögÀO±i⁄
(
›ti⁄
, 
tokí
, 
Ál£
))

44  
CMD_EXEC_ERROR
;

45 
numMachöes
;

46 i‡(!
	`mySå2I¡
(
tokí
, 
numMachöes
) ||ÇumMachines <= 0)

47  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_ILLEGAL
, 
tokí
);

48 i‡(
èskMgr
) {

49 
cout
 << "W¨nög: DñëögÅask m™agî..." << 
ídl
;

50 
dñëe
 
èskMgr
;

52 
èskMgr
 = 
√w
 
	`TaskMgr
(
numMachöes
);

53 
cout
 << "Task m™agî i†öôülized (" << 
numMachöes
 << ")" << 
ídl
;

54  
CMD_EXEC_DONE
;

55 
	}
}

58 
	gTaskInôCmd
::
	$ußge
(
o°ªam
& 
os
) const

60 
os
 << "Ußge: TASKInô <(size_ànumMachöes)>" << 
ídl
;

61 
	}
}

64 
	gTaskInôCmd
::
	$hñp
() const

66 
cout
 << 
	`£tw
(15Ë<< 
À·
 << "TASKInit: "

67 << "Inôülizêèsk m™agî" << 
ídl
;

68 
	}
}

74 
CmdExecSètus


75 
	gTaskNewCmd
::
	$exec
(c⁄° 
°rög
& 
›ti⁄
)

77 i‡(!
èskMgr
) {

78 
˚º
 << "Eº‹:Åask m™agî i†nŸ inôülized!" << 
ídl
;

79  
CMD_EXEC_ERROR
;

82 
ve˘‹
<
°rög
> 
›ti⁄s
;

83 i‡(!
CmdExec
::
	`ÀxO±i⁄s
(
›ti⁄
, 
›ti⁄s
))

84  
CMD_EXEC_ERROR
;

85 i‡(
›ti⁄s
.
	`em±y
())

86  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_MISSING
, "");

88 
boﬁ
 
doR™dom
 = 
Ál£
, 
doName
 = false;

89 
numMachöes
, 
lﬂd
;

90 
°rög
 
«me
;

91 
size_t
 
i
 = 0, 
n
 = 
›ti⁄s
.
	`size
(); i <Ç; ++i) {

92 i‡(
	`mySåNCmp
("-R™dom", 
›ti⁄s
[
i
], 2) == 0) {

93 i‡(
doR™dom
 || 
doName
)

94  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_EXTRA
,
›ti⁄s
[
i
]);

95 
doR™dom
 = 
åue
;

96 i‡(++
i
 >
n
)

97  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_MISSING
,
›ti⁄s
[
i
-1]);

98 i‡(!
	`mySå2I¡
(
›ti⁄s
[
i
], 
numMachöes
) ||ÇumMachines <= 0)

99  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_ILLEGAL
, 
›ti⁄s
[
i
]);

101 i‡(
	`mySåNCmp
("-Name", 
›ti⁄s
[
i
], 2) == 0) {

102 i‡(
doR™dom
 || 
doName
)

103  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_EXTRA
,
›ti⁄s
[
i
]);

104 
doName
 = 
åue
;

105 i‡(++
i
 >
n
)

106  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_MISSING
,
›ti⁄s
[
i
-1]);

107 i‡(!
	`isVÆidV¨Name
(
›ti⁄s
[
i
]))

108  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_ILLEGAL
, 
›ti⁄s
[
i
]);

109 
«me
 = 
›ti⁄s
[
i
];

110 i‡(++
i
 >
n
)

111  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_MISSING
,
›ti⁄s
[
i
-1]);

112 i‡(!
	`mySå2I¡
(
›ti⁄s
[
i
], 
lﬂd
) ||Üoad <= 0)

113  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_ILLEGAL
, 
›ti⁄s
[
i
]);

116  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_ILLEGAL
, 
›ti⁄s
[
i
]);

119 i‡(
doR™dom
) {

120 
èskMgr
->
	`add
(
numMachöes
);

121 
cout
 << "... " << 
numMachöes
 << "ÇewÅaskÇode†¨êadded." << 
ídl
;

124 
	`as£π
(
doName
);

125 i‡(!
èskMgr
->
	`add
(
«me
, 
lﬂd
))

126 
˚º
 << "Eº‹: TaskÇodê(" << 
«me
 << ")álreadyÉxists.\n";

128  
CMD_EXEC_DONE
;

129 
	}
}

132 
	gTaskNewCmd
::
	$ußge
(
o°ªam
& 
os
) const

134 
os
 << "Usage: TASKNew <-Random (size_tÇumMachines) |\n"

135 << " -Namê(°rögÇameË(size_àlﬂd)>" << 
ídl
;

136 
	}
}

139 
	gTaskNewCmd
::
	$hñp
() const

141 
cout
 << 
	`£tw
(15Ë<< 
À·
 << "TASKNew: "

142 << "AddÇewÅaskÇodes" << 
ídl
;

143 
	}
}

148 
CmdExecSètus


149 
	gTaskRemoveCmd
::
	$exec
(c⁄° 
°rög
& 
›ti⁄
)

151 i‡(!
èskMgr
) {

152 
˚º
 << "Eº‹:Åask m™agî i†nŸ inôülized!" << 
ídl
;

153  
CMD_EXEC_ERROR
;

156 
ve˘‹
<
°rög
> 
›ti⁄s
;

157 i‡(!
CmdExec
::
	`ÀxO±i⁄s
(
›ti⁄
, 
›ti⁄s
, 2))

158  
CMD_EXEC_ERROR
;

160 i‡(
	`mySåNCmp
("-R™dom", 
›ti⁄s
[0], 2) == 0) {

161 
numMachöes
;

162 i‡(!
	`mySå2I¡
(
›ti⁄s
[1], 
numMachöes
) ||ÇumMachines <= 0)

163  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_ILLEGAL
, 
›ti⁄s
[1]);

164 
n
 = 
èskMgr
->
	`size
();

165 i‡(
numMachöes
 < 
n
) {

166 
èskMgr
->
	`ªmove
(
numMachöes
);

167 
cout
 << "... " << 
numMachöes
 << "ÅaskÇode†¨êªmoved." << 
ídl
;

170 
èskMgr
->
	`˛ór
();

171 i‡(
numMachöes
 > 
n
)

172 
˚º
 << "W¨nög: s≥cifõdÇumbî (" << 
numMachöes
 << ") is"

173 << " gª©îÅh™Åhênumbî o‡èskÇodes!!" << 
ídl
;

174 
cout
 << "... AŒÅhêèskÇode†¨êªmoved." << 
ídl
;

177 i‡(
	`mySåNCmp
("-Name", 
›ti⁄s
[0], 2) == 0) {

178 i‡(!
	`isVÆidV¨Name
(
›ti⁄s
[1]))

179  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_ILLEGAL
, 
›ti⁄s
[1]);

180 i‡(!
èskMgr
->
	`ªmove
(
›ti⁄s
[1]))

181 
˚º
 << "Eº‹: TaskÇodê(" << 
›ti⁄s
[1] << ") doesÇotÉxist.\n";

184  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_ILLEGAL
, 
›ti⁄s
[0]);

186  
CMD_EXEC_DONE
;

187 
	}
}

190 
	gTaskRemoveCmd
::
	$ußge
(
o°ªam
& 
os
) const

192 
os
 << "Usage: TASKRemove <-Random (size_tÇumMachines) |"

193 << " -Namê(°rögÇame)>" << 
ídl
;

194 
	}
}

197 
	gTaskRemoveCmd
::
	$hñp
() const

199 
cout
 << 
	`£tw
(15Ë<< 
À·
 << "TASKRemove: "

200 << "Removêexi°ögÅaskÇodes" << 
ídl
;

201 
	}
}

206 
CmdExecSètus


207 
	gTaskQuîyCmd
::
	$exec
(c⁄° 
°rög
& 
›ti⁄
)

209 i‡(!
èskMgr
) {

210 
˚º
 << "Eº‹:Åask m™agî i†nŸ inôülized!" << 
ídl
;

211  
CMD_EXEC_ERROR
;

214 
°rög
 
tokí
;

215 i‡(!
CmdExec
::
	`ÀxSögÀO±i⁄
(
›ti⁄
, 
tokí
, 
Ál£
))

216  
CMD_EXEC_ERROR
;

217 i‡(
	`mySåNCmp
("-HAsh", 
tokí
, 3) == 0) {

218 
èskMgr
->
	`¥ötAŒHash
();

219 
cout
 << "Numbî o‡èsks: " << 
èskMgr
->
	`size
(Ë<< 
ídl
;

222 i‡(
	`mySåNCmp
("-HE≠", 
tokí
, 3) == 0) {

223 
èskMgr
->
	`¥ötAŒHóp
();

224 
cout
 << "Numbî o‡èsks: " << 
èskMgr
->
	`size
(Ë<< 
ídl
;

226 i‡(
	`mySåNCmp
("-MINimum", 
tokí
, 4) == 0) {

227 i‡(
èskMgr
->
	`em±y
()) {

228 
˚º
 << "Eº‹:Åask m™agî i†em±y!" << 
ídl
;

229  
CMD_EXEC_ERROR
;

231 
cout
 << "MöÅaskÇode: " << 
èskMgr
->
	`mö
(Ë<< 
ídl
;

233 i‡(
	`isVÆidV¨Name
(
tokí
)) {

234 
TaskNode
 
	`n
(
tokí
, 0);

235 i‡(
èskMgr
->
	`quîy
(
n
)Ë{ 
cout
 << "Quîy suc˚eds: " <<Ç << 
ídl
; }

236 
˚º
 << "Quîy faûs!" << 
ídl
;

239  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_ILLEGAL
, 
tokí
);

240  
CMD_EXEC_DONE
;

241 
	}
}

244 
	gTaskQuîyCmd
::
	$ußge
(
o°ªam
& 
os
) const

246 
os
 << "Usage: TASKQuery <(stringÇame) | -HAsh | -HEap | -MINimum >"

247 << 
ídl
;

248 
	}
}

251 
	gTaskQuîyCmd
::
	$hñp
() const

253 
cout
 << 
	`£tw
(15Ë<< 
À·
 << "TASKQuery: "

254 << "QuîyÅask m™agî" << 
ídl
;

255 
	}
}

260 
CmdExecSètus


261 
	gTaskAssignCmd
::
	$exec
(c⁄° 
°rög
& 
›ti⁄
)

263 i‡(!
èskMgr
) {

264 
˚º
 << "Eº‹:Åask m™agî i†nŸ inôülized!" << 
ídl
;

265  
CMD_EXEC_ERROR
;

268 
ve˘‹
<
°rög
> 
›ti⁄s
;

269 i‡(!
CmdExec
::
	`ÀxO±i⁄s
(
›ti⁄
, 
›ti⁄s
))

270  
CMD_EXEC_ERROR
;

271 i‡(
›ti⁄s
.
	`em±y
())

272  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_MISSING
, "");

274 
boﬁ
 
doRïót
 = 
Ál£
;

275 
lﬂd
 = -1, 
ª≥©s
;

276 
size_t
 
i
 = 0, 
n
 = 
›ti⁄s
.
	`size
(); i <Ç; ++i) {

277 i‡(
	`mySåNCmp
("-Rïót", 
›ti⁄s
[
i
], 2) == 0) {

278 i‡(
doRïót
Ë 
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_EXTRA
,
›ti⁄s
[
i
]);

279 i‡(++
i
 >
n
)

280  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_MISSING
,
›ti⁄s
[
i
-1]);

281 i‡(!
	`mySå2I¡
(
›ti⁄s
[
i
], 
ª≥©s
) ||Ñepeats <= 0)

282  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_ILLEGAL
, 
›ti⁄s
[
i
]);

283 
doRïót
 = 
åue
;

286 i‡(
lﬂd
 != -1)

287  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_EXTRA
,
›ti⁄s
[
i
]);

288 i‡(!
	`mySå2I¡
(
›ti⁄s
[
i
], 
lﬂd
) ||Üoad <= 0)

289  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_ILLEGAL
, 
›ti⁄s
[
i
]);

292 i‡(
lﬂd
 == -1)

293  
CmdExec
::
	`îr‹O±i⁄
(
CMD_OPT_MISSING
, "");

295 i‡(!
doRïót
Ë
ª≥©s
 = 1;

296 
i
 = 0; i < 
ª≥©s
; ++i) {

297 i‡(
èskMgr
->
	`assign
(
lﬂd
))

298 
cout
 << "Taskássignmíàsuc˚eds..." << 
ídl


299 << "Upd©ög mö: " << 
èskMgr
->
	`mö
(Ë<< 
ídl
;

300 
˚º
 << "TaskássignmíàÁûs!" << 
ídl
;

302  
CMD_EXEC_DONE
;

303 
	}
}

306 
	gTaskAssignCmd
::
	$ußge
(
o°ªam
& 
os
) const

308 
os
 << "Usage: TASKAssign <(size_tÜoad)> [-Repeat (size_tÑepeats)]\n";

309 
	}
}

312 
	gTaskAssignCmd
::
	$hñp
() const

314 
cout
 << 
	`£tw
(15Ë<< 
À·
 << "TASKAssign: "

316 
	}
}

	@src/task/taskCmd.h

9 #i‚de‡
TASK_CMD_H


10 
	#TASK_CMD_H


	)

12 
	~"cmdP¨£r.h
"

14 
CmdCœss
(
TaskInôCmd
);

15 
CmdCœss
(
TaskNewCmd
);

16 
CmdCœss
(
TaskRemoveCmd
);

17 
CmdCœss
(
TaskQuîyCmd
);

18 
CmdCœss
(
TaskAssignCmd
);

	@src/task/taskMgr.cpp

9 
	~<io°ªam
>

10 
	~<°rög
>

11 
	~<ˇs£π
>

12 
	~"èskMgr.h
"

13 
	~"∫Gí.h
"

14 
	~"utû.h
"

16 
usög
 
«me•a˚
 
	g°d
;

18 
TaskMgr
 *
	gèskMgr
 = 0;

21 
	gTaskNode
::
	$TaskNode
()

23 
_«me
.
	`ªsize
(
NAME_LEN
);

24 
i
 = 0; i < 
NAME_LEN
; ++i)

25 
_«me
[
i
] = 'a' + 
	`∫Gí
(26);

26 
_lﬂd
 = 
	`∫Gí
(
LOAD_RN
);

27 
	}
}

29 
size_t


30 
	gTaskNode
::
	$›î©‹
 () () const

32 
size_t
 
k
 = 0, 
n
 = (
_«me
.
	`Àngth
() <= 5)? _name.length(): 5;

33 
size_t
 
i
 = 0; i < 
n
; ++i)

34 
k
 ^(
_«me
[
i
] << (i*6));

35  
k
;

36 
	}
}

38 
	go°ªam
& 
	g›î©‹
 << (o°ªam& 
	gos
, c⁄° 
	gTaskNode
& 
	gn
)

40  
	gos
 << "(" << 
	gn
.
	g_«me
 << ", " <<Ç.
	g_lﬂd
 << ")";

43 
	gTaskMgr
::
	$TaskMgr
(
size_t
 
nMachöes
)

44 : 
	`_èskHóp
(
nMachöes
), 
	`_èskHash
(
	$gëHashSize
(
nMachöes
)Ë{ 
	}
}

47 
	gTaskMgr
::
	$˛ór
()

49 
size_t
 
i
 = 0, 
n
 = 
	`size
(); i <Ç; ++i)

50 
cout
 << "TaskÇodêªmoved: " << 
_èskHóp
[
i
] << 
ídl
;

51 
_èskHóp
.
	`˛ór
(); 
_èskHash
.clear();

52 
	}
}

55 
	gTaskMgr
::
	$ªmove
(
size_t
 
nMachöes
)

57 
size_t
 
i
 = 0, 
n
 = 
nMachöes
; i <Ç; ++i) {

58 
size_t
 
j
 = 
	`∫Gí
(
	`size
());

59 
	`as£π
(
_èskHash
.
	`ªmove
(
_èskHóp
[
j
]));

60 
cout
 << "TaskÇodêªmoved: " << 
_èskHóp
[
j
] << 
ídl
;

61 
_èskHóp
.
	`dñD©a
(
j
);

63 
	}
}

67 
boﬁ


68 
	gTaskMgr
::
	$ªmove
(c⁄° 
°rög
& 
s
)

70 
TaskNode
 
	`n
(
s
, 0);

71 i‡(!
_èskHash
.
	`ªmove
(
n
)Ë 
Ál£
;

72 
size_t
 
i
 = 0, 
m
 = 
	`size
(); i < m; ++i)

73 i‡(
_èskHóp
[
i
] =
n
) {

74 
cout
 << "TaskÇodêªmoved: " << 
_èskHóp
[
i
] << 
ídl
;

75 
_èskHóp
.
	`dñD©a
(
i
);

78  
åue
;

79 
	}
}

86 
	gTaskMgr
::
	$add
(
size_t
 
nMachöes
)

89 
size_t
 
i
=0; i<
nMachöes
; ++i){

90 
TaskNode
 
√wNode
;

91 if(!
_èskHash
.
	`ö£π
(
√wNode
)){

92 
åue
){

93 
TaskNode
 
n
;

94 if(
_èskHash
.
	`ö£π
(
n
)){

95 
_èskHóp
.
	`ö£π
(
n
);

96 
cout
 << "TaskÇodêö£πed: (" << 
n
.
	`gëName
(Ë<< ", " <<Ç.
	`gëLﬂd
(Ë<< ")" << 
ídl
;

102 
_èskHóp
.
	`ö£π
(
√wNode
);

104 
cout
 << "TaskÇodêö£πed: (" << 
√wNode
.
	`gëName
(Ë<< ", " <<ÇewNode.
	`gëLﬂd
(Ë<< ")" << 
ídl
;

106 
	}
}

110 
boﬁ


111 
	gTaskMgr
::
	$add
(c⁄° 
°rög
& 
s
, 
size_t
 
l
)

114 
TaskNode
 
	`n
(
s
,
l
);

115 if(!
_èskHash
.
	`ö£π
(
n
))

116  
Ál£
;

117 
_èskHóp
.
	`ö£π
(
n
);

118 
cout
 << "TaskÇodêö£πed: (" << 
s
 << ", " << 
l
 << ")" << 
ídl
;

119  
åue
;

120 
	}
}

128 
boﬁ


129 
	gTaskMgr
::
	$assign
(
size_t
 
l
)

132 if(
	`em±y
()Ë 
Ál£
;

133  
åue
;

134 
	}
}

138 
	gTaskMgr
::
	$¥ötAŒHash
() const

140 
HashSë
<
TaskNode
>::
ôî©‹
 
hi
 = 
_èskHash
.
	`begö
();

141 ; 
hi
 !
_èskHash
.
	`íd
(); ++hi)

142 
cout
 << *
hi
 << 
ídl
;

143 
	}
}

146 
	gTaskMgr
::
	$¥ötAŒHóp
() const

148 
size_t
 
i
 = 0, 
n
 = 
	`size
(); i <Ç; ++i)

149 
cout
 << 
_èskHóp
[
i
] << 
ídl
;

150 
	}
}

	@src/task/taskMgr.h

9 #i‚de‡
TASK_MGR


10 
	#TASK_MGR


	)

12 
	~<io°ªam
>

13 
	~<°rög
>

14 
	~"myHashSë.h
"

15 
	~"myMöHóp.h
"

17 
usög
 
«me•a˚
 
	g°d
;

19 ˛as†
	cTaskNode


21 
	#NAME_LEN
 6

	)

22 
	#LOAD_RN
 20000

	)

24 
	mpublic
:

25 
TaskNode
();

26 
	$TaskNode
(c⁄° 
°rög
& 
n
, 
size_t
 
l
Ë: 
	`_«me
“), 
	$_lﬂd
(
l
) {}

27 ~
	$TaskNode
(Ë{
	}
}

29 
	g›î©‹
 +(
size_t
 
l
Ë{ 
_lﬂd
 +=Ü; }

30 
boﬁ
 
	g›î©‹
 =(c⁄° 
TaskNode
& 
n
Ëc⁄° {  
_«me
 ==Ç._name; }

31 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gTaskNode
& 
	gn
Ëc⁄° {  
	g_lﬂd
 <Ç._load; }

32 
size_t
 
	$›î©‹
 () () const;

34 c⁄° 
°rög
& 
	$gëName
(Ëc⁄° {  
_«me
; 
	}
}

35 
size_t
 
	$gëLﬂd
(Ëc⁄° {  
_lﬂd
; 
	}
}

37 
‰õnd
 
	go°ªam
& 
	g›î©‹
 << (o°ªam& 
	gos
, c⁄° 
	gTaskNode
& 
	gn
);

39 
	g¥iv©e
:

40 
°rög
 
_«me
;

41 
size_t
 
	g_lﬂd
;

44 ˛as†
	cTaskMgr


46 
	mpublic
:

47 
TaskMgr
(
size_t
 
nMachöes
);

48 ~
	$TaskMgr
() {}

50 
	`˛ór
();

52 
size_t
 
	$size
(Ëc⁄° {  
_èskHóp
.
	`size
(); 
	}
}

53 
boﬁ
 
	$em±y
(Ë{  
	`size
(Ë=0; 
	}
}

55 c⁄° 
	gTaskNode
& 
	$mö
(Ëc⁄° {  
_èskHóp
.
	`mö
(); 
	}
}

56 
add
(
size_t
 
nMachöes
);

57 
boﬁ
 
add
(c⁄° 
°rög
&, 
size_t
);

58 
ªmove
(
size_t
 
nMachöes
);

59 
boﬁ
 
ªmove
(c⁄° 
°rög
&);

60 
boﬁ
 
assign
 (
size_t
 
l
);

61 
boﬁ
 
	$quîy
(
TaskNode
& 
n
Ë{  
_èskHash
.
	`quîy
“); 
	}
}

62 
	$¥ötAŒHash
() const;

63 
	$¥ötAŒHóp
() const;

65 
¥iv©e
:

66 
MöHóp
<
TaskNode
> 
_èskHóp
;

67 
HashSë
<
TaskNode
> 
_èskHash
;

68 
	}
};

	@src/util/myGetChar.cpp

8 
	~<io°ªam
>

9 
	~<ãrmios.h
>

10 
	~<°dlib.h
>

11 
	~<˘y≥.h
>

13 
usög
 
«me•a˚
 
	g°d
;

18 
ãrmios
 
	g°‹ed_£âögs
;

20 
	$ª£t_key¥ess
()

22 
	`tc£èâr
(0,
TCSANOW
,&
°‹ed_£âögs
);

23 
	}
}

25 
	$£t_key¥ess
()

27 
ãrmios
 
√w_£âögs
;

28 
	`tcgë©å
(0,&
°‹ed_£âögs
);

29 
√w_£âögs
 = 
°‹ed_£âögs
;

30 
√w_£âögs
.
c_lÊag
 &(~
ICANON
);

31 
√w_£âögs
.
c_lÊag
 &(~
ECHO
);

32 
√w_£âögs
.
c_cc
[
VTIME
] = 0;

33 
	`tcgë©å
(0,&
°‹ed_£âögs
);

34 
√w_£âögs
.
c_cc
[
VMIN
] = 1;

35 
	`tc£èâr
(0,
TCSANOW
,&
√w_£âögs
);

36 
	}
}

42 
	$myGëCh¨
(
i°ªam
& 
i°r
)

44 
ch
;

45 
	`£t_key¥ess
();

46 
i°r
.
	`un£tf
(
ios_ba£
::
skùws
);

47 
i°r
 >> 
ch
;

48 
i°r
.
	`£tf
(
ios_ba£
::
skùws
);

49 
	`ª£t_key¥ess
();

50  
ch
;

51 
	}
}

53 
	$myGëCh¨
()

55  
	`myGëCh¨
(
cö
);

56 
	}
}

	@src/util/myHashSet.h

9 #i‚de‡
MY_HASH_SET_H


10 
	#MY_HASH_SET_H


	)

12 
	~<ve˘‹
>

14 
usög
 
«me•a˚
 
	g°d
;

30 
	gãm∂©e
 <
˛ass
 
	gD©a
>

31 ˛as†
	cHashSë


33 
	mpublic
:

34 
	$HashSë
(
size_t
 
b
 = 0Ë: 
	`_numBuckës
(0), 
	$_buckës
(0Ë{ i‡(
b
 !0Ë
	`öô
(b); }

35 ~
	$HashSë
(Ë{ 
	`ª£t
(); 
	}
}

46 ˛as†
	côî©‹


48 
‰õnd
 
˛ass
 
	gHashSë
<
	gD©a
>;

50 
	gpublic
:

51 
ôî©‹
(
HashSë
* 
h
, 
D©a
* 
d
 = 0, 
size_t
 
i
 = 0, size_à
j
 = 0):

52 
_hash
(
h
), 
_d©a
(
d
), 
_i
(
i
), 
_j
(
j
) {}

53 
ôî©‹
(c⁄° iãøt‹& 
i
):

54 
_hash
(
i
._hash), 
_d©a
(i._d©a), 
_i
(i._i), 
_j
(i._j) {}

55 ~
ôî©‹
() {}

57 c⁄° 
	gD©a
& 
	g›î©‹
 * (Ëc⁄° {  *
	g_d©a
; }

58 
	gôî©‹
& 
	g›î©‹
 ++ () {

59 if(
	g_j
+1 < 
	g_hash
->
	g_buckës
[
_i
].
size
())

60 
	g_d©a
 = &
_hash
->
_buckës
[
_i
][++
_j
];

62 if(
	g_i
+1 >
_hash
->
_numBuckës
){ 
_d©a
 = 0; _ò
_j
 = 0;  *
	gthis
; }

63 
	g_j
 = 0;

64 
	g_hash
->
	g_buckës
[++
_i
].
em±y
())

65 if(
	g_i
 >
_hash
->
_numBuckës
Ë{ 
_d©a
 = 0; _ò0;  *
	gthis
; }

66 
	g_d©a
 = &
_hash
->
_buckës
[
_i
][
_j
];

68  *
	gthis
;

70 
ôî©‹
 
	g›î©‹
 ++ () {

71 
ôî©‹
 
tmp
(*
this
);

72 if(
	g_j
+1 < 
	g_hash
->
	g_buckës
[
_i
].
size
())

73 
	g_d©a
 = &
_hash
->
_buckës
[
_i
][++
_j
];

75 if(
	g_i
+1 >
_hash
->
_numBuckës
){ 
_d©a
 = 0; _ò
_j
 = 0;  *
	gthis
; }

76 
	g_j
 = 0;

77 
	g_hash
->
	g_buckës
[++
_i
].
em±y
())

78 if(
	g_i
 >
_hash
->
_numBuckës
Ë{ 
_d©a
 = 0; _ò0;  *
	gthis
; }

79 
	g_d©a
 = &
_hash
->
_buckës
[
_i
][
_j
];

81  
	gtmp
;

83 
	gôî©‹
& 
	g›î©‹
 -- () {

84 if(
	g_j
 > 0)

85 
	g_d©a
 = &
_hash
->
_buckës
[
_i
][--
_j
];

87 if(
	g_i
 =0Ë{ 
_d©a
 = 0; _ò
_j
 = 0;  *
	gthis
; }

88 
	g_hash
->
	g_buckës
[--
_i
].
em±y
())

89 if(
	g_i
 =0Ë{ 
_d©a
 = 0; _ò
_j
 = 0;  *
	gthis
; }

90 
	g_j
 = 
_buckës
[
_i
].
size
()-1;

91 
	g_d©a
 = &
_hash
->
_buckës
[
_i
][
_j
];

93  *
	gthis
;

95 
ôî©‹
 
	g›î©‹
 --() {

96 
ôî©‹
 
tmp
(*
this
);

97 if(
	g_j
 > 0)

98 
	g_d©a
 = &
_hash
->
_buckës
[
_i
][--
_j
];

100 if(
	g_i
 =0Ë{ 
_d©a
 = 0; _ò
_j
 = 0;  *
	gthis
; }

101 
	g_hash
->
	g_buckës
[--
_i
].
em±y
())

102 if(
	g_i
 =0Ë{ 
_d©a
 = 0; _ò
_j
 = 0;  *
	gthis
; }

103 
	g_j
 = 
_buckës
[
_i
].
size
()-1;

104 
	g_d©a
 = &
_hash
->
_buckës
[
_i
][
_j
];

106  
	gtmp
;

109 
	gôî©‹
& 
	g›î©‹
 = (c⁄° 
ôî©‹
& 
i
Ë{ 
_d©a
 = i._d©a; 
	g_i
 = i.
_i
; 
	g_j
 = i.
_j
;  *
	gthis
; }

111 
boﬁ
 
	g›î©‹
 !(c⁄° 
ôî©‹
& 
i
Ëc⁄° {  
_d©a
 != i._data; }

112 
boﬁ
 
	g›î©‹
 =(c⁄° 
ôî©‹
& 
i
Ëc⁄° {  
_d©a
 == i._data; }

114 
	g¥iv©e
:

115 c⁄° 
HashSë
* 
_hash
;

116 
D©a
* 
	g_d©a
;

117 
size_t
 
	g_i
;

118 
size_t
 
	g_j
;

121 
	$öô
(
size_t
 
b
Ë{ 
_numBuckës
 = b; 
_buckës
 = 
√w
 
ve˘‹
<
D©a
>[b]; 
	}
}

122 
	$ª£t
() {

123 
_numBuckës
 = 0;

124 i‡(
_buckës
Ë{ 
dñëe
 [] _buckets; _buckets = 0; }

125 
	}
}

126 
	$˛ór
() {

127 
size_t
 
i
 = 0; i < 
_numBuckës
; ++iË
_buckës
[i].
	`˛ór
();

128 
	}
}

129 
size_t
 
	$numBuckës
(Ëc⁄° {  
_numBuckës
; 
	}
}

131 
	gve˘‹
<
	gD©a
>& 
	g›î©‹
 [] (
size_t
 
	gi
Ë{  
	g_buckës
[
i
]; }

132 c⁄° 
	gve˘‹
<
	gD©a
>& 
	g›î©‹
 [](
size_t
 
	gi
Ëc⁄° {  
	g_buckës
[
i
]; }

138 
ôî©‹
 
	$begö
() const {

139 
ôî©‹
 
	`ô
(
c⁄°_ˇ°
<
HashSë
<
D©a
>*>(
this
));

140 
size_t
 
i
=0; i<
_numBuckës
; ++i)

141 if(!
_buckës
[
i
].
	`em±y
())

142  
	`ôî©‹
(
c⁄°_ˇ°
<
HashSë
<
D©a
>*>(
this
), &
_buckës
[
i
][0], i, 0);

143  
ô
;

144 
	}
}

147 
ôî©‹
 
	$íd
(Ëc⁄° {  
	`ôî©‹
(
c⁄°_ˇ°
<
HashSë
<
D©a
>*>(
this
)); 
	}
}

150 
boﬁ
 
	$em±y
() const {

151 
size_t
 
i
=0; i<
_buckës
->
	`size
(); ++i)

152 if(!
_buckës
[
i
].
	`em±y
()Ë 
Ál£
;

153  
åue
;

154 
	}
}

157 
size_t
 
	$size
() const {

158 
size_t
 
s
 = 0;

159 
size_t
 
i
=0; i<
_numBuckës
; ++i)

160 
s
 +
_buckës
[
i
].
	`size
();

161  
s
;

162 
	}
}

167 
boﬁ
 
	$check
(c⁄° 
D©a
& 
d
) const {

168 
size_t
 
num
 = 
	`buckëNum
(
d
);

169 
size_t
 
i
=0; i<
_buckës
[
num
].
	`size
(); ++i)

170 if(
_buckës
[
num
][
i
] =
d
Ë 
åue
;

171  
Ál£
;

172 
	}
}

177 
boﬁ
 
	$quîy
(
D©a
& 
d
) const {

178 
size_t
 
num
 = 
	`buckëNum
(
d
);

179 
size_t
 
i
=0; i<
_buckës
[
num
].
	`size
(); ++i)

180 if(
_buckës
[
num
][
i
] =
d
){

181 
d
 = 
_buckës
[
num
][
i
];

182  
åue
;

184  
Ál£
;

185 
	}
}

190 
boﬁ
 
	$upd©e
(c⁄° 
D©a
& 
d
) {

191 
size_t
 
num
 = 
	`buckëNum
(
d
);

192 
size_t
 
i
=0; i<
_buckës
[
num
].
	`size
(); ++i){

193 if(
_buckës
[
num
][
i
] =
d
){

194 if(
i
 =0Ë 
åue
;

195 
D©a
 
tmp
 = 
_buckës
[
num
][0];

196 
_buckës
[
num
][0] = _buckës[num][
i
];

197 
_buckës
[
num
][
i
] = 
tmp
;

198  
åue
;

202 
D©a
 
tmp
 = 
_buckës
[
num
][0];

203 
_buckës
[
num
][0] = 
d
;

204 
_buckës
[
num
].
	`push_back
(
tmp
);

205  
Ál£
;

206 
	}
}

210 
boﬁ
 
	$ö£π
(c⁄° 
D©a
& 
d
) {

211 if(
	`check
(
d
)Ë 
Ál£
;

213 
_buckës
[
	`buckëNum
(
d
)].
	`push_back
(d);

214  
åue
;

215 
	}
}

219 
boﬁ
 
	$ªmove
(c⁄° 
D©a
& 
d
) {

220 
size_t
 
num
 = 
	`buckëNum
(
d
);

221 
size_t
 
i
=0; i<
_buckës
[
num
].
	`size
(); ++i)

222 if(
_buckës
[
num
][
i
] =
d
){

223 
_buckës
[
num
].
	`îa£
(_buckës[num].
	`begö
()+
i
);

224  
åue
;

226  
Ál£
;

227 
	}
}

229 
	g¥iv©e
:

231 
size_t
 
_numBuckës
;

232 
	gve˘‹
<
	gD©a
>* 
	g_buckës
;

234 
size_t
 
	$buckëNum
(c⁄° 
D©a
& 
d
) const {

235  (
	`d
(Ë% 
_numBuckës
); 
	}
}

	@src/util/myMinHeap.h

9 #i‚de‡
MY_MIN_HEAP_H


10 
	#MY_MIN_HEAP_H


	)

12 
	~<Æg‹ôhm
>

13 
	~<ve˘‹
>

15 
	gãm∂©e
 <
˛ass
 
	gD©a
>

16 ˛as†
	cMöHóp


18 
	mpublic
:

19 
	$MöHóp
(
size_t
 
s
 = 0Ë{ i‡(†!0Ë
_d©a
.
	`ª£rve
(s); }

20 ~
	$MöHóp
(Ë{
	}
}

22 
	$˛ór
(Ë{ 
_d©a
.
	`˛ór
(); 
	}
}

26 c⁄° 
	gD©a
& 
	g›î©‹
 [] (
size_t
 
	gi
Ëc⁄° {  
	g_d©a
[
i
]; }

27 
	gD©a
& 
	g›î©‹
 [] (
size_t
 
	gi
Ë{  
	g_d©a
[
i
]; }

29 
size_t
 
	$size
(Ëc⁄° {  
_d©a
.
	`size
(); 
	}
}

32 c⁄° 
	gD©a
& 
	$mö
(Ëc⁄° {  
_d©a
[0]; 
	}
}

34 
	$ö£π
(c⁄° 
D©a
& 
d
) {

35 
_d©a
.
	`push_back
(
d
);

36 
t
 = 
_d©a
.
	`size
();

37 
t
 > 1){

38 
p
 = 
t
 / 2;

39 if(!(
d
 < 
_d©a
[
p
-1]))

42 
_d©a
[
t
-1] = _d©a[
p
-1];

43 
t
 = 
p
;

45 
_d©a
[
t
-1] = 
d
;

46 
	}
}

48 
	$dñMö
() {

49 
p
 = 1, 
t
 = 2 *Ö, 
n
 = 
_d©a
.
	`size
();

50 
t
 <
n
){

51 if(
t
 < 
n
)

52 if(
_d©a
[
t
] < _data[t-1]) ++t;

53 if(
_d©a
[
n
-1] < _d©a[
t
-1])

55 
_d©a
[
p
-1] = _d©a[
t
-1];

56 
p
 = 
t
;

57 
t
 = 2 * 
p
;

59 
_d©a
[
p
-1] = _d©a[
n
-1];

60 
_d©a
.
	`îa£
(--_d©a.
	`íd
());

61 
	}
}

63 
	$dñD©a
(
size_t
 
i
) {

64 ++
i
;

65 
t
 = 2 * 
i
, 
n
 = 
_d©a
.
	`size
();

66 
t
 <
n
){

67 if(
t
 < 
n
)

68 if(
_d©a
[
t
] < _data[t-1]) ++t;

69 if(
_d©a
[
n
-1] < _d©a[
t
-1])

71 
_d©a
[
i
-1] = _d©a[
t
-1];

72 
i
 = 
t
;

73 
t
 = 2 * 
i
;

75 
_d©a
[
i
-1] = _d©a[
n
-1];

76 
_d©a
.
	`îa£
(--_d©a.
	`íd
());

77 
	}
}

79 
	g¥iv©e
:

81 
ve˘‹
<
D©a
> 
_d©a
;

	@src/util/myString.cpp

8 
	~<°rög
>

9 
	~<˘y≥.h
>

10 
	~<c°rög
>

11 
	~<ˇs£π
>

13 
usög
 
«me•a˚
 
	g°d
;

23 
	$mySåNCmp
(c⁄° 
°rög
& 
s1
, c⁄° såög& 
s2
, 
n
)

25 
	`as£π
(
n
 > 0);

26 
n2
 = 
s2
.
	`size
();

27 i‡(
n2
 == 0)  -1;

28 
n1
 = 
s1
.
	`size
();

29 
	`as£π
(
n1
 >
n
);

30 
i
 = 0; i < 
n1
; ++i) {

31 i‡(
i
 =
n2
)

32  (
i
 < 
n
)? 1 : 0;

33 
ch1
 = (
	`isuµî
(
s1
[
i
]))? 
	`tﬁowî
(s1[i]) : s1[i];

34 
ch2
 = (
	`isuµî
(
s2
[
i
]))? 
	`tﬁowî
(s2[i]) : s2[i];

35 i‡(
ch1
 !
ch2
)

36  (
ch1
 - 
ch2
);

38  (
n1
 - 
n2
);

39 
	}
}

47 
size_t


48 
mySåGëTok
(c⁄° 
°rög
& 
°r
, såög& 
tok
, 
size_t
 
pos
 = 0,

49 c⁄° 
dñ
 = ' ')

51 
size_t
 
begö
 = 
°r
.
föd_fú°_nŸ_of
(
dñ
, 
pos
);

52 i‡(
	gbegö
 =
°rög
::
≈os
Ë{ 
tok
 = "";  begin; }

53 
size_t
 
	gíd
 = 
°r
.
föd_fú°_of
(
dñ
, 
begö
);

54 
	gtok
 = 
°r
.
sub°r
(
begö
, 
íd
 - begin);

55  
	gíd
;

61 
boﬁ


62 
	$mySå2I¡
(c⁄° 
°rög
& 
°r
, & 
num
)

64 
num
 = 0;

65 
size_t
 
i
 = 0;

66 
sign
 = 1;

67 i‡(
°r
[0] ='-'Ë{ 
sign
 = -1; 
i
 = 1; }

68 
boﬁ
 
vÆid
 = 
Ál£
;

69 ; 
i
 < 
°r
.
	`size
(); ++i) {

70 i‡(
	`isdigô
(
°r
[
i
])) {

71 
num
 *= 10;

72 
num
 +(
°r
[
i
] - '0');

73 
vÆid
 = 
åue
;

75  
Ál£
;

77 
num
 *
sign
;

78  
vÆid
;

79 
	}
}

85 
boﬁ


86 
	$isVÆidV¨Name
(c⁄° 
°rög
& 
°r
)

88 
size_t
 
n
 = 
°r
.
	`size
();

89 i‡(
n
 =0Ë 
Ál£
;

90 i‡(!
	`ißÕha
(
°r
[0]) && str[0] != '_')

91  
Ál£
;

92 
size_t
 
i
 = 1; i < 
n
; ++i)

93 i‡(!
	`iß um
(
°r
[
i
]) && str[i] != '_')

94  
Ál£
;

95  
åue
;

96 
	}
}

	@src/util/myUsage.h

9 #i‚de‡
MY_USAGE_H


10 
	#MY_USAGE_H


	)

12 
	~<uni°d.h
>

13 
	~<io°ªam
>

14 
	~<iom™ù
>

15 
	~<sys/times.h
>

16 
	~<sys/ªsour˚.h
>

18 
usög
 
«me•a˚
 
	g°d
;

21 #unde‡
MYCLK_TCK


22 
	#MYCLK_TCK
 
	`sysc⁄f
(
_SC_CLK_TCK
)

	)

25 ˛as†
	cMyUßge


27 
	mpublic
:

28 
	$MyUßge
(Ë{ 
	`ª£t
(); }

30 
	$ª£t
() {

31 
_öôMem
 = 
	`checkMem
();

32 
_cuºítTick
 = 
	`checkTick
();

33 
_≥riodU£dTime
 = 
_tŸÆU£dTime
 = 0.0;

34 
	}
}

36 
	$ªp‹t
(
boﬁ
 
ªpTime
, boﬁ 
ªpMem
) {

37 i‡(
ªpTime
) {

38 
	`£tTimeUßge
();

39 
cout
 << "PîiodÅimêu£d : " << 
	`£çªcisi⁄
(4)

40 << 
_≥riodU£dTime
 << " sec⁄ds" << 
ídl
;

41 
cout
 << "TŸÆÅimêu£d : " << 
	`£çªcisi⁄
(4)

42 << 
_tŸÆU£dTime
 << " sec⁄ds" << 
ídl
;

44 i‡(
ªpMem
) {

45 
	`£tMemUßge
();

46 
cout
 << "TŸÆ mem‹y u£d: " << 
	`£çªcisi⁄
(4)

47 << 
_cuºítMem
 << " M Byãs" << 
ídl
;

49 
	}
}

51 
	g¥iv©e
:

53 
_öôMem
;

54 
	g_cuºítMem
;

57 
	g_cuºítTick
;

58 
	g_≥riodU£dTime
;

59 
	g_tŸÆU£dTime
;

62 
	$checkMem
() const {

63 
rußge
 
ußge
;

64 if(0 =
	`gërußge
(
RUSAGE_SELF
, &
ußge
))

65 #ifde‡
__APPLE__


66  
ußge
.
ru_maxrss
/(1<<20);

68  
ußge
.
ru_maxrss
/(1<<10);

72 
	}
}

73 
	$checkTick
() const {

74 
tms
 
tBuf„r
;

75 
	`times
(&
tBuf„r
);

76  
tBuf„r
.
tms_utime
;

77 
	}
}

78 
	$£tMemUßge
(Ë{ 
_cuºítMem
 = 
	`checkMem
(Ë- 
_öôMem
; 
	}
}

79 
	$£tTimeUßge
() {

80 
thisTick
 = 
	`checkTick
();

81 
_≥riodU£dTime
 = (
thisTick
 - 
_cuºítTick
Ë/ (
MYCLK_TCK
);

82 
_tŸÆU£dTime
 +
_≥riodU£dTime
;

83 
_cuºítTick
 = 
thisTick
;

84 
	}
}

	@src/util/rnGen.h

8 #i‚de‡
RN_GEN_H


9 
	#RN_GEN_H


	)

11 
	~<uni°d.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<°dlib.h
>

14 
	~<limôs.h
>

16 
	#my_§™dom
 
§™dom


	)

17 
	#my_øndom
 
øndom


	)

19 ˛as†
	cR™domNumGí


21 
	mpublic
:

22 
	$R™domNumGí
(Ë{ 
	`my_§™dom
(
	`gëpid
()); }

23 
	$R™domNumGí
(
£ed
Ë{ 
	`my_§™dom
(£ed); 
	}
}

24 c⁄° 
	$›î©‹
(Ë(c⁄° 
ønge
) const {

25  (
ønge
 * ((
	`my_øndom
()Ë/ 
INT_MAX
));

26 
	}
}

	@src/util/util.cpp

8 
	~<sys/ty≥s.h
>

9 
	~<dúít.h
>

10 
	~<î∫o.h
>

11 
	~<ve˘‹
>

12 
	~<°rög
>

13 
	~<c°rög
>

14 
	~<io°ªam
>

15 
	~<iom™ù
>

16 
	~<Æg‹ôhm
>

17 
	~"∫Gí.h
"

18 
	~"myUßge.h
"

20 
usög
 
«me•a˚
 
	g°d
;

26 
R™domNumGí
 
∫Gí
(0);

27 
MyUßge
 
	gmyUßge
;

37 
	gli°Dú


38 (
	gve˘‹
<
	g°rög
>& 
	gfûes
, c⁄° såög& 
	g¥efix
, c⁄° såög& 
	gdú
 = ".")

40 
DIR
 *
dp
;

41 
dúít
 *
	gdúp
;

42 i‡((
	gdp
 = 
›ídú
(
dú
.
c_°r
())Ë=
NULL
) {

43 
˚º
 << "Eº‹(" << 
î∫o
 << "): faûedÅÿ›í " << 
dú
 << "!!\n";

44  
	gî∫o
;

47 c⁄° *
	gµ
 = 
¥efix
.
size
()?Öªfix.
c_°r
(): 0;

48 (
	gdúp
 = 
ªaddú
(
dp
)Ë!
NULL
) {

49 i‡(
°rög
(
dúp
->
d_«me
) == "." ||

50 
°rög
(
dúp
->
d_«me
) == "..") ;

51 i‡(!
	gµ
 || 
°∫cmp
(
dúp
->
d_«me
, 
µ
, 
¥efix
.
size
()) == 0)

52 
fûes
.
push_back
(
°rög
(
dúp
->
d_«me
));

54 
s‹t
(
fûes
.
begö
(), fûes.
íd
());

55 
˛o£dú
(
dp
);

59 
size_t
 
	$gëHashSize
(
size_t
 
s
) {

60 i‡(
s
 < 8)  7;

61 i‡(
s
 < 16)  13;

62 i‡(
s
 < 32)  31;

63 i‡(
s
 < 64)  61;

64 i‡(
s
 < 128)  127;

65 i‡(
s
 < 512)  509;

66 i‡(
s
 < 2048)  1499;

67 i‡(
s
 < 8192)  4999;

68 i‡(
s
 < 32768)  13999;

69 i‡(
s
 < 131072)  59999;

70 i‡(
s
 < 524288)  100019;

71 i‡(
s
 < 2097152)  300007;

72 i‡(
s
 < 8388608)  900001;

73 i‡(
s
 < 33554432)  1000003;

74 i‡(
s
 < 134217728)  3000017;

75 i‡(
s
 < 536870912)  5000011;

77 
	}
}

	@src/util/util.h

8 #i‚de‡
UTIL_H


9 
	#UTIL_H


	)

11 
	~<i°ªam
>

12 
	~<ve˘‹
>

13 
	~"∫Gí.h
"

14 
	~"myUßge.h
"

16 
usög
 
«me•a˚
 
	g°d
;

19 
R™domNumGí
 
∫Gí
;

20 
MyUßge
 
myUßge
;

23 
mySåNCmp
(c⁄° 
°rög
& 
s1
, c⁄° såög& 
s2
, 
n
);

24 
size_t
 
mySåGëTok
(c⁄° 
°rög
& 
°r
, såög& 
tok
, size_à
pos
 = 0,

25 c⁄° 
dñ
 = ' ');

26 
boﬁ
 
mySå2I¡
(c⁄° 
°rög
& 
°r
, & 
num
);

27 
boﬁ
 
isVÆidV¨Name
(c⁄° 
°rög
& 
°r
);

30 
myGëCh¨
(
i°ªam
&);

31 
myGëCh¨
();

34 
li°Dú
(
ve˘‹
<
°rög
>&, const string&, const string&);

35 
size_t
 
gëHashSize
(size_à
s
);

38 
	gãm∂©e
<
˛ass
 
	gT
>

39 
	$˛órLi°
(
T
& 
l
)

41 
T
 
tmp
;

42 
l
.
	`sw≠
(
tmp
);

43 
	}
}

45 
	gãm∂©e
<
˛ass
 
	gT
, cœs†
	gD
>

46 
	$ªmoveD©a
(
T
& 
l
, c⁄° 
D
& 
d
)

48 
size_t
 
des
 = 0;

49 
size_t
 
i
 = 0, 
n
 = 
l
.
	`size
(); i <Ç; ++i) {

50 i‡(
l
[
i
] !
d
) {

51 i‡(
i
 !
des
Ë
l
[des] =Ü[i];

52 ++
des
;

56 
l
.
	`ªsize
(
des
);

57 
	}
}

	@
1
.
0
15
296
src/cmd/cmdCharDef.h
src/cmd/cmdParser.h
src/main/main.cpp
src/task/taskCmd.cpp
src/task/taskCmd.h
src/task/taskMgr.cpp
src/task/taskMgr.h
src/util/myGetChar.cpp
src/util/myHashSet.h
src/util/myMinHeap.h
src/util/myString.cpp
src/util/myUsage.h
src/util/rnGen.h
src/util/util.cpp
src/util/util.h
