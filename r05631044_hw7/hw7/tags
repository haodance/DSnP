!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARROW_DOWN_KEY	include/cmdCharDef.h	/^   ARROW_DOWN_KEY   = 66 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_DOWN_KEY	include/cmdCharDef.h	/^   ARROW_DOWN_KEY   = TA_ARROW_DOWN_KEY,$/;"	e	enum:ParseChar
ARROW_DOWN_KEY	src/cmd/cmdCharDef.h	/^   ARROW_DOWN_KEY   = 66 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_DOWN_KEY	src/cmd/cmdCharDef.h	/^   ARROW_DOWN_KEY   = TA_ARROW_DOWN_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_BEGIN	include/cmdCharDef.h	/^   ARROW_KEY_BEGIN  = ARROW_UP_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_BEGIN	include/cmdCharDef.h	/^   ARROW_KEY_BEGIN  = TA_ARROW_KEY_BEGIN,$/;"	e	enum:ParseChar
ARROW_KEY_BEGIN	src/cmd/cmdCharDef.h	/^   ARROW_KEY_BEGIN  = ARROW_UP_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_BEGIN	src/cmd/cmdCharDef.h	/^   ARROW_KEY_BEGIN  = TA_ARROW_KEY_BEGIN,$/;"	e	enum:ParseChar
ARROW_KEY_END	include/cmdCharDef.h	/^   ARROW_KEY_END    = ARROW_LEFT_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_END	include/cmdCharDef.h	/^   ARROW_KEY_END    = TA_ARROW_KEY_END,$/;"	e	enum:ParseChar
ARROW_KEY_END	src/cmd/cmdCharDef.h	/^   ARROW_KEY_END    = ARROW_LEFT_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_END	src/cmd/cmdCharDef.h	/^   ARROW_KEY_END    = TA_ARROW_KEY_END,$/;"	e	enum:ParseChar
ARROW_KEY_FLAG	include/cmdCharDef.h	/^   ARROW_KEY_FLAG   = 1 << 8,$/;"	e	enum:ParseChar
ARROW_KEY_FLAG	include/cmdCharDef.h	/^   ARROW_KEY_FLAG   = TA_ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_KEY_FLAG	src/cmd/cmdCharDef.h	/^   ARROW_KEY_FLAG   = 1 << 8,$/;"	e	enum:ParseChar
ARROW_KEY_FLAG	src/cmd/cmdCharDef.h	/^   ARROW_KEY_FLAG   = TA_ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_KEY_INT	include/cmdCharDef.h	/^   ARROW_KEY_INT    = 91,$/;"	e	enum:ParseChar
ARROW_KEY_INT	include/cmdCharDef.h	/^   ARROW_KEY_INT    = TA_ARROW_KEY_INT,$/;"	e	enum:ParseChar
ARROW_KEY_INT	src/cmd/cmdCharDef.h	/^   ARROW_KEY_INT    = 91,$/;"	e	enum:ParseChar
ARROW_KEY_INT	src/cmd/cmdCharDef.h	/^   ARROW_KEY_INT    = TA_ARROW_KEY_INT,$/;"	e	enum:ParseChar
ARROW_LEFT_KEY	include/cmdCharDef.h	/^   ARROW_LEFT_KEY   = 68 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_LEFT_KEY	include/cmdCharDef.h	/^   ARROW_LEFT_KEY   = TA_ARROW_LEFT_KEY,$/;"	e	enum:ParseChar
ARROW_LEFT_KEY	src/cmd/cmdCharDef.h	/^   ARROW_LEFT_KEY   = 68 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_LEFT_KEY	src/cmd/cmdCharDef.h	/^   ARROW_LEFT_KEY   = TA_ARROW_LEFT_KEY,$/;"	e	enum:ParseChar
ARROW_RIGHT_KEY	include/cmdCharDef.h	/^   ARROW_RIGHT_KEY  = 67 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_RIGHT_KEY	include/cmdCharDef.h	/^   ARROW_RIGHT_KEY  = TA_ARROW_RIGHT_KEY,$/;"	e	enum:ParseChar
ARROW_RIGHT_KEY	src/cmd/cmdCharDef.h	/^   ARROW_RIGHT_KEY  = 67 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_RIGHT_KEY	src/cmd/cmdCharDef.h	/^   ARROW_RIGHT_KEY  = TA_ARROW_RIGHT_KEY,$/;"	e	enum:ParseChar
ARROW_UP_KEY	include/cmdCharDef.h	/^   ARROW_UP_KEY     = 65 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_UP_KEY	include/cmdCharDef.h	/^   ARROW_UP_KEY     = TA_ARROW_UP_KEY,$/;"	e	enum:ParseChar
ARROW_UP_KEY	src/cmd/cmdCharDef.h	/^   ARROW_UP_KEY     = 65 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_UP_KEY	src/cmd/cmdCharDef.h	/^   ARROW_UP_KEY     = TA_ARROW_UP_KEY,$/;"	e	enum:ParseChar
BACK_SPACE_CHAR	include/cmdCharDef.h	/^   BACK_SPACE_CHAR  = 8,$/;"	e	enum:ParseChar
BACK_SPACE_CHAR	include/cmdCharDef.h	/^   BACK_SPACE_CHAR  = TA_BACK_SPACE_CHAR,$/;"	e	enum:ParseChar
BACK_SPACE_CHAR	src/cmd/cmdCharDef.h	/^   BACK_SPACE_CHAR  = 8,$/;"	e	enum:ParseChar
BACK_SPACE_CHAR	src/cmd/cmdCharDef.h	/^   BACK_SPACE_CHAR  = TA_BACK_SPACE_CHAR,$/;"	e	enum:ParseChar
BACK_SPACE_KEY	include/cmdCharDef.h	/^   BACK_SPACE_KEY   = 127,$/;"	e	enum:ParseChar
BACK_SPACE_KEY	include/cmdCharDef.h	/^   BACK_SPACE_KEY   = TA_BACK_SPACE_KEY,$/;"	e	enum:ParseChar
BACK_SPACE_KEY	src/cmd/cmdCharDef.h	/^   BACK_SPACE_KEY   = 127,$/;"	e	enum:ParseChar
BACK_SPACE_KEY	src/cmd/cmdCharDef.h	/^   BACK_SPACE_KEY   = TA_BACK_SPACE_KEY,$/;"	e	enum:ParseChar
BEEP_CHAR	include/cmdCharDef.h	/^   BEEP_CHAR        = 7,$/;"	e	enum:ParseChar
BEEP_CHAR	include/cmdCharDef.h	/^   BEEP_CHAR        = TA_BEEP_CHAR,$/;"	e	enum:ParseChar
BEEP_CHAR	src/cmd/cmdCharDef.h	/^   BEEP_CHAR        = 7,$/;"	e	enum:ParseChar
BEEP_CHAR	src/cmd/cmdCharDef.h	/^   BEEP_CHAR        = TA_BEEP_CHAR,$/;"	e	enum:ParseChar
CMD_CHAR_DEF_H	include/cmdCharDef.h	/^#define CMD_CHAR_DEF_H$/;"	d
CMD_CHAR_DEF_H	src/cmd/cmdCharDef.h	/^#define CMD_CHAR_DEF_H$/;"	d
CMD_EXEC_DONE	include/cmdParser.h	/^   CMD_EXEC_DONE  = 0,$/;"	e	enum:CmdExecStatus
CMD_EXEC_DONE	src/cmd/cmdParser.h	/^   CMD_EXEC_DONE  = 0,$/;"	e	enum:CmdExecStatus
CMD_EXEC_ERROR	include/cmdParser.h	/^   CMD_EXEC_ERROR = 1,$/;"	e	enum:CmdExecStatus
CMD_EXEC_ERROR	src/cmd/cmdParser.h	/^   CMD_EXEC_ERROR = 1,$/;"	e	enum:CmdExecStatus
CMD_EXEC_NOP	include/cmdParser.h	/^   CMD_EXEC_NOP   = 3,$/;"	e	enum:CmdExecStatus
CMD_EXEC_NOP	src/cmd/cmdParser.h	/^   CMD_EXEC_NOP   = 3,$/;"	e	enum:CmdExecStatus
CMD_EXEC_QUIT	include/cmdParser.h	/^   CMD_EXEC_QUIT  = 2,$/;"	e	enum:CmdExecStatus
CMD_EXEC_QUIT	src/cmd/cmdParser.h	/^   CMD_EXEC_QUIT  = 2,$/;"	e	enum:CmdExecStatus
CMD_EXEC_TOT	include/cmdParser.h	/^   CMD_EXEC_TOT$/;"	e	enum:CmdExecStatus
CMD_EXEC_TOT	src/cmd/cmdParser.h	/^   CMD_EXEC_TOT$/;"	e	enum:CmdExecStatus
CMD_OPT_ERROR_TOT	include/cmdParser.h	/^   CMD_OPT_ERROR_TOT$/;"	e	enum:CmdOptionError
CMD_OPT_ERROR_TOT	src/cmd/cmdParser.h	/^   CMD_OPT_ERROR_TOT$/;"	e	enum:CmdOptionError
CMD_OPT_EXTRA	include/cmdParser.h	/^   CMD_OPT_EXTRA      = 1,$/;"	e	enum:CmdOptionError
CMD_OPT_EXTRA	src/cmd/cmdParser.h	/^   CMD_OPT_EXTRA      = 1,$/;"	e	enum:CmdOptionError
CMD_OPT_FOPEN_FAIL	include/cmdParser.h	/^   CMD_OPT_FOPEN_FAIL = 3,$/;"	e	enum:CmdOptionError
CMD_OPT_FOPEN_FAIL	src/cmd/cmdParser.h	/^   CMD_OPT_FOPEN_FAIL = 3,$/;"	e	enum:CmdOptionError
CMD_OPT_ILLEGAL	include/cmdParser.h	/^   CMD_OPT_ILLEGAL    = 2,$/;"	e	enum:CmdOptionError
CMD_OPT_ILLEGAL	src/cmd/cmdParser.h	/^   CMD_OPT_ILLEGAL    = 2,$/;"	e	enum:CmdOptionError
CMD_OPT_MISSING	include/cmdParser.h	/^   CMD_OPT_MISSING    = 0,$/;"	e	enum:CmdOptionError
CMD_OPT_MISSING	src/cmd/cmdParser.h	/^   CMD_OPT_MISSING    = 0,$/;"	e	enum:CmdOptionError
CMD_PARSER_H	include/cmdParser.h	/^#define CMD_PARSER_H$/;"	d
CMD_PARSER_H	src/cmd/cmdParser.h	/^#define CMD_PARSER_H$/;"	d
CmdClass	include/cmdParser.h	/^#define CmdClass(/;"	d
CmdClass	src/cmd/cmdParser.h	/^#define CmdClass(/;"	d
CmdExec	include/cmdParser.h	/^   CmdExec() {}$/;"	f	class:CmdExec
CmdExec	include/cmdParser.h	/^class CmdExec$/;"	c
CmdExec	src/cmd/cmdParser.h	/^   CmdExec() {}$/;"	f	class:CmdExec
CmdExec	src/cmd/cmdParser.h	/^class CmdExec$/;"	c
CmdExecStatus	include/cmdParser.h	/^enum CmdExecStatus$/;"	g
CmdExecStatus	src/cmd/cmdParser.h	/^enum CmdExecStatus$/;"	g
CmdMap	include/cmdParser.h	/^typedef map<const string, CmdExec*>   CmdMap;$/;"	t	class:CmdParser
CmdMap	src/cmd/cmdParser.h	/^typedef map<const string, CmdExec*>   CmdMap;$/;"	t	class:CmdParser
CmdOptionError	include/cmdParser.h	/^enum CmdOptionError$/;"	g
CmdOptionError	src/cmd/cmdParser.h	/^enum CmdOptionError$/;"	g
CmdParser	include/cmdParser.h	/^   CmdParser(const string& p) : _prompt(p), _dofile(0),$/;"	f	class:CmdParser
CmdParser	include/cmdParser.h	/^class CmdParser$/;"	c
CmdParser	src/cmd/cmdParser.h	/^   CmdParser(const string& p) : _prompt(p), _dofile(0),$/;"	f	class:CmdParser
CmdParser	src/cmd/cmdParser.h	/^class CmdParser$/;"	c
CmdRegPair	include/cmdParser.h	/^typedef pair<const string, CmdExec*>  CmdRegPair;$/;"	t	class:CmdParser
CmdRegPair	src/cmd/cmdParser.h	/^typedef pair<const string, CmdExec*>  CmdRegPair;$/;"	t	class:CmdParser
DELETE_KEY	include/cmdCharDef.h	/^   DELETE_KEY       = 51 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
DELETE_KEY	include/cmdCharDef.h	/^   DELETE_KEY       = TA_DELETE_KEY,$/;"	e	enum:ParseChar
DELETE_KEY	src/cmd/cmdCharDef.h	/^   DELETE_KEY       = 51 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
DELETE_KEY	src/cmd/cmdCharDef.h	/^   DELETE_KEY       = TA_DELETE_KEY,$/;"	e	enum:ParseChar
END_KEY	include/cmdCharDef.h	/^   END_KEY          = 52 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
END_KEY	include/cmdCharDef.h	/^   END_KEY          = TA_END_KEY,$/;"	e	enum:ParseChar
END_KEY	src/cmd/cmdCharDef.h	/^   END_KEY          = 52 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
END_KEY	src/cmd/cmdCharDef.h	/^   END_KEY          = TA_END_KEY,$/;"	e	enum:ParseChar
ESC_KEY	include/cmdCharDef.h	/^   ESC_KEY          = 27,         \/\/ Not printable; used for combo keys$/;"	e	enum:ParseChar
ESC_KEY	include/cmdCharDef.h	/^   ESC_KEY          = TA_ESC_KEY,         \/\/ Not printable; used for combo keys$/;"	e	enum:ParseChar
ESC_KEY	src/cmd/cmdCharDef.h	/^   ESC_KEY          = 27,         \/\/ Not printable; used for combo keys$/;"	e	enum:ParseChar
ESC_KEY	src/cmd/cmdCharDef.h	/^   ESC_KEY          = TA_ESC_KEY,         \/\/ Not printable; used for combo keys$/;"	e	enum:ParseChar
EXEC	Makefile	/^EXEC     = taskMgr$/;"	m
HOME_KEY	include/cmdCharDef.h	/^   HOME_KEY         = 49 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
HOME_KEY	include/cmdCharDef.h	/^   HOME_KEY         = TA_HOME_KEY,$/;"	e	enum:ParseChar
HOME_KEY	src/cmd/cmdCharDef.h	/^   HOME_KEY         = 49 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
HOME_KEY	src/cmd/cmdCharDef.h	/^   HOME_KEY         = TA_HOME_KEY,$/;"	e	enum:ParseChar
HashSet	include/myHashSet.h	/^   HashSet(size_t b = 0) : _numBuckets(0), _buckets(0) { if (b != 0) init(b); }$/;"	f	class:HashSet
HashSet	include/myHashSet.h	/^class HashSet$/;"	c
HashSet	src/util/myHashSet.h	/^   HashSet(size_t b = 0) : _numBuckets(0), _buckets(0) { if (b != 0) init(b); }$/;"	f	class:HashSet
HashSet	src/util/myHashSet.h	/^class HashSet$/;"	c
INPUT_END_KEY	include/cmdCharDef.h	/^   INPUT_END_KEY    = 4,          \/\/ ctrl-d$/;"	e	enum:ParseChar
INPUT_END_KEY	include/cmdCharDef.h	/^   INPUT_END_KEY    = TA_INPUT_END_KEY,   \/\/ ctrl-d$/;"	e	enum:ParseChar
INPUT_END_KEY	src/cmd/cmdCharDef.h	/^   INPUT_END_KEY    = 4,          \/\/ ctrl-d$/;"	e	enum:ParseChar
INPUT_END_KEY	src/cmd/cmdCharDef.h	/^   INPUT_END_KEY    = TA_INPUT_END_KEY,   \/\/ ctrl-d$/;"	e	enum:ParseChar
INSERT_KEY	include/cmdCharDef.h	/^   INSERT_KEY       = 50 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
INSERT_KEY	include/cmdCharDef.h	/^   INSERT_KEY       = TA_INSERT_KEY,$/;"	e	enum:ParseChar
INSERT_KEY	src/cmd/cmdCharDef.h	/^   INSERT_KEY       = 50 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
INSERT_KEY	src/cmd/cmdCharDef.h	/^   INSERT_KEY       = TA_INSERT_KEY,$/;"	e	enum:ParseChar
LIBPKGS	Makefile	/^LIBPKGS  = $(REFPKGS) $(SRCPKGS)$/;"	m
LIBS	Makefile	/^LIBS     = $(addprefix -l, $(LIBPKGS))$/;"	m
LINE_BEGIN_KEY	include/cmdCharDef.h	/^   LINE_BEGIN_KEY   = 1,          \/\/ ctrl-a$/;"	e	enum:ParseChar
LINE_BEGIN_KEY	include/cmdCharDef.h	/^   LINE_BEGIN_KEY   = TA_LINE_BEGIN_KEY,  \/\/ ctrl-a$/;"	e	enum:ParseChar
LINE_BEGIN_KEY	src/cmd/cmdCharDef.h	/^   LINE_BEGIN_KEY   = 1,          \/\/ ctrl-a$/;"	e	enum:ParseChar
LINE_BEGIN_KEY	src/cmd/cmdCharDef.h	/^   LINE_BEGIN_KEY   = TA_LINE_BEGIN_KEY,  \/\/ ctrl-a$/;"	e	enum:ParseChar
LINE_END_KEY	include/cmdCharDef.h	/^   LINE_END_KEY     = 5,          \/\/ ctrl-e$/;"	e	enum:ParseChar
LINE_END_KEY	include/cmdCharDef.h	/^   LINE_END_KEY     = TA_LINE_END_KEY,    \/\/ ctrl-e$/;"	e	enum:ParseChar
LINE_END_KEY	src/cmd/cmdCharDef.h	/^   LINE_END_KEY     = 5,          \/\/ ctrl-e$/;"	e	enum:ParseChar
LINE_END_KEY	src/cmd/cmdCharDef.h	/^   LINE_END_KEY     = TA_LINE_END_KEY,    \/\/ ctrl-e$/;"	e	enum:ParseChar
LOAD_RN	src/task/taskMgr.h	/^#define LOAD_RN /;"	d
MAIN	Makefile	/^MAIN     = main$/;"	m
MOD_KEY_BEGIN	include/cmdCharDef.h	/^   MOD_KEY_BEGIN    = HOME_KEY,$/;"	e	enum:ParseChar
MOD_KEY_BEGIN	include/cmdCharDef.h	/^   MOD_KEY_BEGIN    = TA_MOD_KEY_BEGIN,$/;"	e	enum:ParseChar
MOD_KEY_BEGIN	src/cmd/cmdCharDef.h	/^   MOD_KEY_BEGIN    = HOME_KEY,$/;"	e	enum:ParseChar
MOD_KEY_BEGIN	src/cmd/cmdCharDef.h	/^   MOD_KEY_BEGIN    = TA_MOD_KEY_BEGIN,$/;"	e	enum:ParseChar
MOD_KEY_DUMMY	include/cmdCharDef.h	/^   MOD_KEY_DUMMY    = 126,$/;"	e	enum:ParseChar
MOD_KEY_DUMMY	include/cmdCharDef.h	/^   MOD_KEY_DUMMY    = TA_MOD_KEY_DUMMY,$/;"	e	enum:ParseChar
MOD_KEY_DUMMY	src/cmd/cmdCharDef.h	/^   MOD_KEY_DUMMY    = 126,$/;"	e	enum:ParseChar
MOD_KEY_DUMMY	src/cmd/cmdCharDef.h	/^   MOD_KEY_DUMMY    = TA_MOD_KEY_DUMMY,$/;"	e	enum:ParseChar
MOD_KEY_END	include/cmdCharDef.h	/^   MOD_KEY_END      = PG_DOWN_KEY,$/;"	e	enum:ParseChar
MOD_KEY_END	include/cmdCharDef.h	/^   MOD_KEY_END      = TA_MOD_KEY_END,$/;"	e	enum:ParseChar
MOD_KEY_END	src/cmd/cmdCharDef.h	/^   MOD_KEY_END      = PG_DOWN_KEY,$/;"	e	enum:ParseChar
MOD_KEY_END	src/cmd/cmdCharDef.h	/^   MOD_KEY_END      = TA_MOD_KEY_END,$/;"	e	enum:ParseChar
MOD_KEY_FLAG	include/cmdCharDef.h	/^   MOD_KEY_FLAG     = 1 << 9,$/;"	e	enum:ParseChar
MOD_KEY_FLAG	include/cmdCharDef.h	/^   MOD_KEY_FLAG     = TA_MOD_KEY_FLAG,$/;"	e	enum:ParseChar
MOD_KEY_FLAG	src/cmd/cmdCharDef.h	/^   MOD_KEY_FLAG     = 1 << 9,$/;"	e	enum:ParseChar
MOD_KEY_FLAG	src/cmd/cmdCharDef.h	/^   MOD_KEY_FLAG     = TA_MOD_KEY_FLAG,$/;"	e	enum:ParseChar
MOD_KEY_INT	include/cmdCharDef.h	/^   MOD_KEY_INT      = 91,$/;"	e	enum:ParseChar
MOD_KEY_INT	include/cmdCharDef.h	/^   MOD_KEY_INT      = TA_MOD_KEY_INT,$/;"	e	enum:ParseChar
MOD_KEY_INT	src/cmd/cmdCharDef.h	/^   MOD_KEY_INT      = 91,$/;"	e	enum:ParseChar
MOD_KEY_INT	src/cmd/cmdCharDef.h	/^   MOD_KEY_INT      = TA_MOD_KEY_INT,$/;"	e	enum:ParseChar
MYCLK_TCK	include/myUsage.h	/^#define MYCLK_TCK /;"	d
MYCLK_TCK	include/myUsage.h	/^#undef MYCLK_TCK$/;"	d
MYCLK_TCK	src/util/myUsage.h	/^#define MYCLK_TCK /;"	d
MYCLK_TCK	src/util/myUsage.h	/^#undef MYCLK_TCK$/;"	d
MY_HASH_SET_H	include/myHashSet.h	/^#define MY_HASH_SET_H$/;"	d
MY_HASH_SET_H	src/util/myHashSet.h	/^#define MY_HASH_SET_H$/;"	d
MY_MIN_HEAP_H	include/myMinHeap.h	/^#define MY_MIN_HEAP_H$/;"	d
MY_MIN_HEAP_H	src/util/myMinHeap.h	/^#define MY_MIN_HEAP_H$/;"	d
MY_USAGE_H	include/myUsage.h	/^#define MY_USAGE_H$/;"	d
MY_USAGE_H	src/util/myUsage.h	/^#define MY_USAGE_H$/;"	d
MinHeap	include/myMinHeap.h	/^   MinHeap(size_t s = 0) { if (s != 0) _data.reserve(s); }$/;"	f	class:MinHeap
MinHeap	include/myMinHeap.h	/^class MinHeap$/;"	c
MinHeap	src/util/myMinHeap.h	/^   MinHeap(size_t s = 0) { if (s != 0) _data.reserve(s); }$/;"	f	class:MinHeap
MinHeap	src/util/myMinHeap.h	/^class MinHeap$/;"	c
MyUsage	include/myUsage.h	/^   MyUsage() { reset(); }$/;"	f	class:MyUsage
MyUsage	include/myUsage.h	/^class MyUsage$/;"	c
MyUsage	src/util/myUsage.h	/^   MyUsage() { reset(); }$/;"	f	class:MyUsage
MyUsage	src/util/myUsage.h	/^class MyUsage$/;"	c
NAME_LEN	src/task/taskMgr.h	/^#define NAME_LEN /;"	d
NEWLINE_KEY	include/cmdCharDef.h	/^   NEWLINE_KEY      = TA_NEWLINE_KEY,     \/\/ enter('\\n') or ctrl-m$/;"	e	enum:ParseChar
NEWLINE_KEY	include/cmdCharDef.h	/^   NEWLINE_KEY      = int('\\n'),  \/\/ enter('\\n') or ctrl-m$/;"	e	enum:ParseChar
NEWLINE_KEY	src/cmd/cmdCharDef.h	/^   NEWLINE_KEY      = TA_NEWLINE_KEY,     \/\/ enter('\\n') or ctrl-m$/;"	e	enum:ParseChar
NEWLINE_KEY	src/cmd/cmdCharDef.h	/^   NEWLINE_KEY      = int('\\n'),  \/\/ enter('\\n') or ctrl-m$/;"	e	enum:ParseChar
PARSE_CHAR_END	include/cmdCharDef.h	/^   PARSE_CHAR_END$/;"	e	enum:ParseChar
PARSE_CHAR_END	src/cmd/cmdCharDef.h	/^   PARSE_CHAR_END$/;"	e	enum:ParseChar
PG_DOWN_KEY	include/cmdCharDef.h	/^   PG_DOWN_KEY      = 54 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
PG_DOWN_KEY	include/cmdCharDef.h	/^   PG_DOWN_KEY      = TA_PG_DOWN_KEY,$/;"	e	enum:ParseChar
PG_DOWN_KEY	src/cmd/cmdCharDef.h	/^   PG_DOWN_KEY      = 54 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
PG_DOWN_KEY	src/cmd/cmdCharDef.h	/^   PG_DOWN_KEY      = TA_PG_DOWN_KEY,$/;"	e	enum:ParseChar
PG_OFFSET	include/cmdParser.h	/^#define PG_OFFSET /;"	d
PG_OFFSET	src/cmd/cmdParser.h	/^#define PG_OFFSET /;"	d
PG_UP_KEY	include/cmdCharDef.h	/^   PG_UP_KEY        = 53 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
PG_UP_KEY	include/cmdCharDef.h	/^   PG_UP_KEY        = TA_PG_UP_KEY,$/;"	e	enum:ParseChar
PG_UP_KEY	src/cmd/cmdCharDef.h	/^   PG_UP_KEY        = 53 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
PG_UP_KEY	src/cmd/cmdCharDef.h	/^   PG_UP_KEY        = TA_PG_UP_KEY,$/;"	e	enum:ParseChar
ParseChar	include/cmdCharDef.h	/^enum ParseChar$/;"	g
ParseChar	src/cmd/cmdCharDef.h	/^enum ParseChar$/;"	g
READ_BUF_SIZE	include/cmdParser.h	/^#define READ_BUF_SIZE /;"	d
READ_BUF_SIZE	src/cmd/cmdParser.h	/^#define READ_BUF_SIZE /;"	d
REFPKGS	Makefile	/^REFPKGS  = cmd$/;"	m
RN_GEN_H	include/rnGen.h	/^#define RN_GEN_H$/;"	d
RN_GEN_H	src/util/rnGen.h	/^#define RN_GEN_H$/;"	d
RandomNumGen	include/rnGen.h	/^      RandomNumGen() { my_srandom(getpid()); }$/;"	f	class:RandomNumGen
RandomNumGen	include/rnGen.h	/^      RandomNumGen(unsigned seed) { my_srandom(seed); }$/;"	f	class:RandomNumGen
RandomNumGen	include/rnGen.h	/^class RandomNumGen$/;"	c
RandomNumGen	src/util/rnGen.h	/^      RandomNumGen() { my_srandom(getpid()); }$/;"	f	class:RandomNumGen
RandomNumGen	src/util/rnGen.h	/^      RandomNumGen(unsigned seed) { my_srandom(seed); }$/;"	f	class:RandomNumGen
RandomNumGen	src/util/rnGen.h	/^class RandomNumGen$/;"	c
SRCLIBS	Makefile	/^SRCLIBS  = $(addsuffix .a, $(addprefix lib, $(SRCPKGS)))$/;"	m
SRCPKGS	Makefile	/^SRCPKGS  = task util$/;"	m
TAB_KEY	include/cmdCharDef.h	/^   TAB_KEY          = TA_TAB_KEY,         \/\/ tab('\\t') or Ctrl-i$/;"	e	enum:ParseChar
TAB_KEY	include/cmdCharDef.h	/^   TAB_KEY          = int('\\t'),  \/\/ tab('\\t') or Ctrl-i$/;"	e	enum:ParseChar
TAB_KEY	src/cmd/cmdCharDef.h	/^   TAB_KEY          = TA_TAB_KEY,         \/\/ tab('\\t') or Ctrl-i$/;"	e	enum:ParseChar
TAB_KEY	src/cmd/cmdCharDef.h	/^   TAB_KEY          = int('\\t'),  \/\/ tab('\\t') or Ctrl-i$/;"	e	enum:ParseChar
TASK_CMD_H	src/task/taskCmd.h	/^#define TASK_CMD_H$/;"	d
TASK_MGR	src/task/taskMgr.h	/^#define TASK_MGR$/;"	d
TA_ARROW_DOWN_KEY	include/cmdCharDef.h	/^#define TA_ARROW_DOWN_KEY /;"	d
TA_ARROW_DOWN_KEY	src/cmd/cmdCharDef.h	/^#define TA_ARROW_DOWN_KEY /;"	d
TA_ARROW_KEY_BEGIN	include/cmdCharDef.h	/^#define TA_ARROW_KEY_BEGIN /;"	d
TA_ARROW_KEY_BEGIN	src/cmd/cmdCharDef.h	/^#define TA_ARROW_KEY_BEGIN /;"	d
TA_ARROW_KEY_END	include/cmdCharDef.h	/^#define TA_ARROW_KEY_END /;"	d
TA_ARROW_KEY_END	src/cmd/cmdCharDef.h	/^#define TA_ARROW_KEY_END /;"	d
TA_ARROW_KEY_FLAG	include/cmdCharDef.h	/^#define TA_ARROW_KEY_FLAG /;"	d
TA_ARROW_KEY_FLAG	src/cmd/cmdCharDef.h	/^#define TA_ARROW_KEY_FLAG /;"	d
TA_ARROW_KEY_INT	include/cmdCharDef.h	/^#define TA_ARROW_KEY_INT /;"	d
TA_ARROW_KEY_INT	src/cmd/cmdCharDef.h	/^#define TA_ARROW_KEY_INT /;"	d
TA_ARROW_LEFT_KEY	include/cmdCharDef.h	/^#define TA_ARROW_LEFT_KEY /;"	d
TA_ARROW_LEFT_KEY	src/cmd/cmdCharDef.h	/^#define TA_ARROW_LEFT_KEY /;"	d
TA_ARROW_RIGHT_KEY	include/cmdCharDef.h	/^#define TA_ARROW_RIGHT_KEY /;"	d
TA_ARROW_RIGHT_KEY	src/cmd/cmdCharDef.h	/^#define TA_ARROW_RIGHT_KEY /;"	d
TA_ARROW_UP_KEY	include/cmdCharDef.h	/^#define TA_ARROW_UP_KEY /;"	d
TA_ARROW_UP_KEY	src/cmd/cmdCharDef.h	/^#define TA_ARROW_UP_KEY /;"	d
TA_BACK_SPACE_CHAR	include/cmdCharDef.h	/^#define TA_BACK_SPACE_CHAR /;"	d
TA_BACK_SPACE_CHAR	src/cmd/cmdCharDef.h	/^#define TA_BACK_SPACE_CHAR /;"	d
TA_BACK_SPACE_KEY	include/cmdCharDef.h	/^#define TA_BACK_SPACE_KEY /;"	d
TA_BACK_SPACE_KEY	src/cmd/cmdCharDef.h	/^#define TA_BACK_SPACE_KEY /;"	d
TA_BEEP_CHAR	include/cmdCharDef.h	/^#define TA_BEEP_CHAR /;"	d
TA_BEEP_CHAR	src/cmd/cmdCharDef.h	/^#define TA_BEEP_CHAR /;"	d
TA_DELETE_KEY	include/cmdCharDef.h	/^#define TA_DELETE_KEY /;"	d
TA_DELETE_KEY	src/cmd/cmdCharDef.h	/^#define TA_DELETE_KEY /;"	d
TA_END_KEY	include/cmdCharDef.h	/^#define TA_END_KEY /;"	d
TA_END_KEY	src/cmd/cmdCharDef.h	/^#define TA_END_KEY /;"	d
TA_ESC_KEY	include/cmdCharDef.h	/^#define TA_ESC_KEY /;"	d
TA_ESC_KEY	src/cmd/cmdCharDef.h	/^#define TA_ESC_KEY /;"	d
TA_HOME_KEY	include/cmdCharDef.h	/^#define TA_HOME_KEY /;"	d
TA_HOME_KEY	src/cmd/cmdCharDef.h	/^#define TA_HOME_KEY /;"	d
TA_INPUT_END_KEY	include/cmdCharDef.h	/^#define TA_INPUT_END_KEY /;"	d
TA_INPUT_END_KEY	src/cmd/cmdCharDef.h	/^#define TA_INPUT_END_KEY /;"	d
TA_INSERT_KEY	include/cmdCharDef.h	/^#define TA_INSERT_KEY /;"	d
TA_INSERT_KEY	src/cmd/cmdCharDef.h	/^#define TA_INSERT_KEY /;"	d
TA_LINE_BEGIN_KEY	include/cmdCharDef.h	/^#define TA_LINE_BEGIN_KEY /;"	d
TA_LINE_BEGIN_KEY	src/cmd/cmdCharDef.h	/^#define TA_LINE_BEGIN_KEY /;"	d
TA_LINE_END_KEY	include/cmdCharDef.h	/^#define TA_LINE_END_KEY /;"	d
TA_LINE_END_KEY	src/cmd/cmdCharDef.h	/^#define TA_LINE_END_KEY /;"	d
TA_MOD_KEY_BEGIN	include/cmdCharDef.h	/^#define TA_MOD_KEY_BEGIN /;"	d
TA_MOD_KEY_BEGIN	src/cmd/cmdCharDef.h	/^#define TA_MOD_KEY_BEGIN /;"	d
TA_MOD_KEY_DUMMY	include/cmdCharDef.h	/^#define TA_MOD_KEY_DUMMY /;"	d
TA_MOD_KEY_DUMMY	src/cmd/cmdCharDef.h	/^#define TA_MOD_KEY_DUMMY /;"	d
TA_MOD_KEY_END	include/cmdCharDef.h	/^#define TA_MOD_KEY_END /;"	d
TA_MOD_KEY_END	src/cmd/cmdCharDef.h	/^#define TA_MOD_KEY_END /;"	d
TA_MOD_KEY_FLAG	include/cmdCharDef.h	/^#define TA_MOD_KEY_FLAG /;"	d
TA_MOD_KEY_FLAG	src/cmd/cmdCharDef.h	/^#define TA_MOD_KEY_FLAG /;"	d
TA_MOD_KEY_INT	include/cmdCharDef.h	/^#define TA_MOD_KEY_INT /;"	d
TA_MOD_KEY_INT	src/cmd/cmdCharDef.h	/^#define TA_MOD_KEY_INT /;"	d
TA_NEWLINE_KEY	include/cmdCharDef.h	/^#define TA_NEWLINE_KEY /;"	d
TA_NEWLINE_KEY	src/cmd/cmdCharDef.h	/^#define TA_NEWLINE_KEY /;"	d
TA_PG_DOWN_KEY	include/cmdCharDef.h	/^#define TA_PG_DOWN_KEY /;"	d
TA_PG_DOWN_KEY	src/cmd/cmdCharDef.h	/^#define TA_PG_DOWN_KEY /;"	d
TA_PG_UP_KEY	include/cmdCharDef.h	/^#define TA_PG_UP_KEY /;"	d
TA_PG_UP_KEY	src/cmd/cmdCharDef.h	/^#define TA_PG_UP_KEY /;"	d
TA_TAB_KEY	include/cmdCharDef.h	/^#define TA_TAB_KEY /;"	d
TA_TAB_KEY	src/cmd/cmdCharDef.h	/^#define TA_TAB_KEY /;"	d
TA_UNDEFINED_KEY	include/cmdCharDef.h	/^#define TA_UNDEFINED_KEY /;"	d
TA_UNDEFINED_KEY	src/cmd/cmdCharDef.h	/^#define TA_UNDEFINED_KEY /;"	d
TaskAssignCmd	src/task/taskCmd.h	/^CmdClass(TaskAssignCmd);$/;"	v
TaskInitCmd	src/task/taskCmd.h	/^CmdClass(TaskInitCmd);$/;"	v
TaskMgr	src/task/taskMgr.cpp	/^TaskMgr::TaskMgr(size_t nMachines)$/;"	f	class:TaskMgr
TaskMgr	src/task/taskMgr.h	/^class TaskMgr$/;"	c
TaskNewCmd	src/task/taskCmd.h	/^CmdClass(TaskNewCmd);$/;"	v
TaskNode	src/task/taskMgr.cpp	/^TaskNode::TaskNode() $/;"	f	class:TaskNode
TaskNode	src/task/taskMgr.h	/^   TaskNode(const string& n, size_t l) : _name(n), _load(l) {}$/;"	f	class:TaskNode
TaskNode	src/task/taskMgr.h	/^class TaskNode$/;"	c
TaskQueryCmd	src/task/taskCmd.h	/^CmdClass(TaskQueryCmd);$/;"	v
TaskRemoveCmd	src/task/taskCmd.h	/^CmdClass(TaskRemoveCmd);$/;"	v
UNDEFINED_KEY	include/cmdCharDef.h	/^   UNDEFINED_KEY    = TA_UNDEFINED_KEY,$/;"	e	enum:ParseChar
UNDEFINED_KEY	include/cmdCharDef.h	/^   UNDEFINED_KEY  = INT_MAX,$/;"	e	enum:ParseChar
UNDEFINED_KEY	src/cmd/cmdCharDef.h	/^   UNDEFINED_KEY    = TA_UNDEFINED_KEY,$/;"	e	enum:ParseChar
UNDEFINED_KEY	src/cmd/cmdCharDef.h	/^   UNDEFINED_KEY  = INT_MAX,$/;"	e	enum:ParseChar
UTIL_H	include/util.h	/^#define UTIL_H$/;"	d
UTIL_H	src/util/util.h	/^#define UTIL_H$/;"	d
_buckets	include/myHashSet.h	/^   vector<Data>*     _buckets;$/;"	m	class:HashSet
_buckets	src/util/myHashSet.h	/^   vector<Data>*     _buckets;$/;"	m	class:HashSet
_cmdMap	include/cmdParser.h	/^   CmdMap    _cmdMap;                \/\/ map from string to command$/;"	m	class:CmdParser
_cmdMap	src/cmd/cmdParser.h	/^   CmdMap    _cmdMap;                \/\/ map from string to command$/;"	m	class:CmdParser
_currentMem	include/myUsage.h	/^   double     _currentMem;$/;"	m	class:MyUsage
_currentMem	src/util/myUsage.h	/^   double     _currentMem;$/;"	m	class:MyUsage
_currentTick	include/myUsage.h	/^   double     _currentTick;$/;"	m	class:MyUsage
_currentTick	src/util/myUsage.h	/^   double     _currentTick;$/;"	m	class:MyUsage
_data	include/myHashSet.h	/^      Data* _data;$/;"	m	class:HashSet::iterator
_data	include/myMinHeap.h	/^   vector<Data>   _data;$/;"	m	class:MinHeap
_data	src/util/myHashSet.h	/^      Data* _data;$/;"	m	class:HashSet::iterator
_data	src/util/myMinHeap.h	/^   vector<Data>   _data;$/;"	m	class:MinHeap
_dofile	include/cmdParser.h	/^   ifstream* _dofile;                \/\/ for command script$/;"	m	class:CmdParser
_dofile	src/cmd/cmdParser.h	/^   ifstream* _dofile;                \/\/ for command script$/;"	m	class:CmdParser
_dofileStack	include/cmdParser.h	/^   stack<ifstream*> _dofileStack;    \/\/ For recursive dofile calling$/;"	m	class:CmdParser
_dofileStack	src/cmd/cmdParser.h	/^   stack<ifstream*> _dofileStack;    \/\/ For recursive dofile calling$/;"	m	class:CmdParser
_hash	include/myHashSet.h	/^      const HashSet* _hash;$/;"	m	class:HashSet::iterator
_hash	src/util/myHashSet.h	/^      const HashSet* _hash;$/;"	m	class:HashSet::iterator
_history	include/cmdParser.h	/^   vector<string>   _history;        \/\/ oldest:_history[0],latest:_hist.back()$/;"	m	class:CmdParser
_history	src/cmd/cmdParser.h	/^   vector<string>   _history;        \/\/ oldest:_history[0],latest:_hist.back()$/;"	m	class:CmdParser
_historyIdx	include/cmdParser.h	/^   int       _historyIdx;            \/\/ (1) Position to insert history string$/;"	m	class:CmdParser
_historyIdx	src/cmd/cmdParser.h	/^   int       _historyIdx;            \/\/ (1) Position to insert history string$/;"	m	class:CmdParser
_i	include/myHashSet.h	/^      size_t _i;$/;"	m	class:HashSet::iterator
_i	src/util/myHashSet.h	/^      size_t _i;$/;"	m	class:HashSet::iterator
_initMem	include/myUsage.h	/^   double     _initMem;$/;"	m	class:MyUsage
_initMem	src/util/myUsage.h	/^   double     _initMem;$/;"	m	class:MyUsage
_j	include/myHashSet.h	/^      size_t _j;$/;"	m	class:HashSet::iterator
_j	src/util/myHashSet.h	/^      size_t _j;$/;"	m	class:HashSet::iterator
_load	src/task/taskMgr.h	/^   size_t   _load;$/;"	m	class:TaskNode
_name	src/task/taskMgr.h	/^   string   _name;$/;"	m	class:TaskNode
_numBuckets	include/myHashSet.h	/^   size_t            _numBuckets;$/;"	m	class:HashSet
_numBuckets	src/util/myHashSet.h	/^   size_t            _numBuckets;$/;"	m	class:HashSet
_optCmd	include/cmdParser.h	/^   string            _optCmd;$/;"	m	class:CmdExec
_optCmd	src/cmd/cmdParser.h	/^   string            _optCmd;$/;"	m	class:CmdExec
_periodUsedTime	include/myUsage.h	/^   double     _periodUsedTime;$/;"	m	class:MyUsage
_periodUsedTime	src/util/myUsage.h	/^   double     _periodUsedTime;$/;"	m	class:MyUsage
_prompt	include/cmdParser.h	/^   const string _prompt;             \/\/ command prompt$/;"	m	class:CmdParser
_prompt	src/cmd/cmdParser.h	/^   const string _prompt;             \/\/ command prompt$/;"	m	class:CmdParser
_readBuf	include/cmdParser.h	/^   char      _readBuf[READ_BUF_SIZE];\/\/ save the current line input$/;"	m	class:CmdParser
_readBuf	src/cmd/cmdParser.h	/^   char      _readBuf[READ_BUF_SIZE];\/\/ save the current line input$/;"	m	class:CmdParser
_readBufEnd	include/cmdParser.h	/^   char*     _readBufEnd;            \/\/ end of string position of _readBuf$/;"	m	class:CmdParser
_readBufEnd	src/cmd/cmdParser.h	/^   char*     _readBufEnd;            \/\/ end of string position of _readBuf$/;"	m	class:CmdParser
_readBufPtr	include/cmdParser.h	/^   char*     _readBufPtr;            \/\/ point to the cursor position$/;"	m	class:CmdParser
_readBufPtr	src/cmd/cmdParser.h	/^   char*     _readBufPtr;            \/\/ point to the cursor position$/;"	m	class:CmdParser
_tabPressCount	include/cmdParser.h	/^   size_t    _tabPressCount;         \/\/ The number of tab pressed$/;"	m	class:CmdParser
_tabPressCount	src/cmd/cmdParser.h	/^   size_t    _tabPressCount;         \/\/ The number of tab pressed$/;"	m	class:CmdParser
_taskHash	src/task/taskMgr.h	/^   HashSet<TaskNode>   _taskHash;$/;"	m	class:TaskMgr
_taskHeap	src/task/taskMgr.h	/^   MinHeap<TaskNode>   _taskHeap;$/;"	m	class:TaskMgr
_tempCmdStored	include/cmdParser.h	/^   bool      _tempCmdStored;         \/\/ When up\/pgUp is pressed, current line$/;"	m	class:CmdParser
_tempCmdStored	src/cmd/cmdParser.h	/^   bool      _tempCmdStored;         \/\/ When up\/pgUp is pressed, current line$/;"	m	class:CmdParser
_totalUsedTime	include/myUsage.h	/^   double     _totalUsedTime;$/;"	m	class:MyUsage
_totalUsedTime	src/util/myUsage.h	/^   double     _totalUsedTime;$/;"	m	class:MyUsage
add	src/task/taskMgr.cpp	/^TaskMgr::add(const string& s, size_t l)$/;"	f	class:TaskMgr
add	src/task/taskMgr.cpp	/^TaskMgr::add(size_t nMachines)$/;"	f	class:TaskMgr
assign	src/task/taskMgr.cpp	/^TaskMgr::assign(size_t l)$/;"	f	class:TaskMgr
begin	include/myHashSet.h	/^   iterator begin() const {$/;"	f	class:HashSet
begin	src/util/myHashSet.h	/^   iterator begin() const {$/;"	f	class:HashSet
bucketNum	include/myHashSet.h	/^   size_t bucketNum(const Data& d) const {$/;"	f	class:HashSet
bucketNum	src/util/myHashSet.h	/^   size_t bucketNum(const Data& d) const {$/;"	f	class:HashSet
check	include/myHashSet.h	/^   bool check(const Data& d) const {$/;"	f	class:HashSet
check	src/util/myHashSet.h	/^   bool check(const Data& d) const {$/;"	f	class:HashSet
checkMem	include/myUsage.h	/^   double checkMem() const {$/;"	f	class:MyUsage
checkMem	src/util/myUsage.h	/^   double checkMem() const {$/;"	f	class:MyUsage
checkTick	include/myUsage.h	/^   double checkTick() const {$/;"	f	class:MyUsage
checkTick	src/util/myUsage.h	/^   double checkTick() const {$/;"	f	class:MyUsage
clear	include/myHashSet.h	/^   void clear() {$/;"	f	class:HashSet
clear	include/myMinHeap.h	/^   void clear() { _data.clear(); }$/;"	f	class:MinHeap
clear	src/task/taskMgr.cpp	/^TaskMgr::clear()$/;"	f	class:TaskMgr
clear	src/util/myHashSet.h	/^   void clear() {$/;"	f	class:HashSet
clear	src/util/myMinHeap.h	/^   void clear() { _data.clear(); }$/;"	f	class:MinHeap
clearList	include/util.h	/^void clearList(T& l)$/;"	f
clearList	src/util/util.h	/^void clearList(T& l)$/;"	f
delData	include/myMinHeap.h	/^   void delData(size_t i) {$/;"	f	class:MinHeap
delData	src/util/myMinHeap.h	/^   void delData(size_t i) {$/;"	f	class:MinHeap
delMin	include/myMinHeap.h	/^   void delMin() {$/;"	f	class:MinHeap
delMin	src/util/myMinHeap.h	/^   void delMin() {$/;"	f	class:MinHeap
empty	include/myHashSet.h	/^   bool empty() const {$/;"	f	class:HashSet
empty	src/task/taskMgr.h	/^   bool empty() { return size() == 0; }$/;"	f	class:TaskMgr
empty	src/util/myHashSet.h	/^   bool empty() const {$/;"	f	class:HashSet
end	include/myHashSet.h	/^   iterator end() const { return iterator(const_cast<HashSet<Data>*>(this)); }$/;"	f	class:HashSet
end	src/util/myHashSet.h	/^   iterator end() const { return iterator(const_cast<HashSet<Data>*>(this)); }$/;"	f	class:HashSet
exec	src/task/taskCmd.cpp	/^TaskAssignCmd::exec(const string& option)$/;"	f	class:TaskAssignCmd
exec	src/task/taskCmd.cpp	/^TaskInitCmd::exec(const string& option)$/;"	f	class:TaskInitCmd
exec	src/task/taskCmd.cpp	/^TaskNewCmd::exec(const string& option)$/;"	f	class:TaskNewCmd
exec	src/task/taskCmd.cpp	/^TaskQueryCmd::exec(const string& option)$/;"	f	class:TaskQueryCmd
exec	src/task/taskCmd.cpp	/^TaskRemoveCmd::exec(const string& option)$/;"	f	class:TaskRemoveCmd
getHashSize	src/util/util.cpp	/^size_t getHashSize(size_t s) {$/;"	f
getLoad	src/task/taskMgr.h	/^   size_t getLoad() const { return _load; }$/;"	f	class:TaskNode
getName	src/task/taskMgr.h	/^   const string& getName() const { return _name; }$/;"	f	class:TaskNode
getOptCmd	include/cmdParser.h	/^   const string& getOptCmd() const { return _optCmd; }$/;"	f	class:CmdExec
getOptCmd	src/cmd/cmdParser.h	/^   const string& getOptCmd() const { return _optCmd; }$/;"	f	class:CmdExec
help	src/task/taskCmd.cpp	/^TaskAssignCmd::help() const$/;"	f	class:TaskAssignCmd
help	src/task/taskCmd.cpp	/^TaskInitCmd::help() const$/;"	f	class:TaskInitCmd
help	src/task/taskCmd.cpp	/^TaskNewCmd::help() const$/;"	f	class:TaskNewCmd
help	src/task/taskCmd.cpp	/^TaskQueryCmd::help() const$/;"	f	class:TaskQueryCmd
help	src/task/taskCmd.cpp	/^TaskRemoveCmd::help() const$/;"	f	class:TaskRemoveCmd
init	include/myHashSet.h	/^   void init(size_t b) { _numBuckets = b; _buckets = new vector<Data>[b]; }$/;"	f	class:HashSet
init	src/util/myHashSet.h	/^   void init(size_t b) { _numBuckets = b; _buckets = new vector<Data>[b]; }$/;"	f	class:HashSet
initTaskCmd	src/task/taskCmd.cpp	/^initTaskCmd()$/;"	f
insert	include/myHashSet.h	/^   bool insert(const Data& d) {$/;"	f	class:HashSet
insert	include/myMinHeap.h	/^   void insert(const Data& d) {$/;"	f	class:MinHeap
insert	src/util/myHashSet.h	/^   bool insert(const Data& d) {$/;"	f	class:HashSet
insert	src/util/myMinHeap.h	/^   void insert(const Data& d) {$/;"	f	class:MinHeap
isValidVarName	src/util/myString.cpp	/^isValidVarName(const string& str)$/;"	f
iterator	include/myHashSet.h	/^      iterator(HashSet* h, Data* d = 0, size_t i = 0, size_t j = 0): $/;"	f	class:HashSet::iterator
iterator	include/myHashSet.h	/^      iterator(const iterator& i): $/;"	f	class:HashSet::iterator
iterator	include/myHashSet.h	/^   class iterator$/;"	c	class:HashSet
iterator	src/util/myHashSet.h	/^      iterator(HashSet* h, Data* d = 0, size_t i = 0, size_t j = 0): $/;"	f	class:HashSet::iterator
iterator	src/util/myHashSet.h	/^      iterator(const iterator& i): $/;"	f	class:HashSet::iterator
iterator	src/util/myHashSet.h	/^   class iterator$/;"	c	class:HashSet
listDir	src/util/util.cpp	/^int listDir$/;"	f
main	src/main/main.cpp	/^main(int argc, char** argv)$/;"	f
min	include/myMinHeap.h	/^   const Data& min() const { return _data[0]; }$/;"	f	class:MinHeap
min	src/task/taskMgr.h	/^   const TaskNode& min() const { return _taskHeap.min(); }$/;"	f	class:TaskMgr
min	src/util/myMinHeap.h	/^   const Data& min() const { return _data[0]; }$/;"	f	class:MinHeap
myGetChar	src/util/myGetChar.cpp	/^char myGetChar()$/;"	f
myGetChar	src/util/myGetChar.cpp	/^char myGetChar(istream& istr)$/;"	f
myStr2Int	src/util/myString.cpp	/^myStr2Int(const string& str, int& num)$/;"	f
myStrGetTok	src/util/myString.cpp	/^myStrGetTok(const string& str, string& tok, size_t pos = 0,$/;"	f
myStrNCmp	src/util/myString.cpp	/^myStrNCmp(const string& s1, const string& s2, unsigned n)$/;"	f
myUsage	src/util/util.cpp	/^MyUsage       myUsage;$/;"	v
my_random	include/rnGen.h	/^#define my_random /;"	d
my_random	src/util/rnGen.h	/^#define my_random /;"	d
my_srandom	include/rnGen.h	/^#define my_srandom /;"	d
my_srandom	src/util/rnGen.h	/^#define my_srandom /;"	d
myexit	src/main/main.cpp	/^myexit()$/;"	f	file:
numBuckets	include/myHashSet.h	/^   size_t numBuckets() const { return _numBuckets; }$/;"	f	class:HashSet
numBuckets	src/util/myHashSet.h	/^   size_t numBuckets() const { return _numBuckets; }$/;"	f	class:HashSet
operator !=	include/myHashSet.h	/^      bool operator != (const iterator& i) const { return _data != i._data; }$/;"	f	class:HashSet::iterator
operator !=	src/util/myHashSet.h	/^      bool operator != (const iterator& i) const { return _data != i._data; }$/;"	f	class:HashSet::iterator
operator ()	include/rnGen.h	/^      const int operator() (const int range) const {$/;"	f	class:RandomNumGen
operator ()	src/task/taskMgr.cpp	/^TaskNode::operator () () const $/;"	f	class:TaskNode
operator ()	src/util/rnGen.h	/^      const int operator() (const int range) const {$/;"	f	class:RandomNumGen
operator *	include/myHashSet.h	/^      const Data& operator * () const { return *_data; }$/;"	f	class:HashSet::iterator
operator *	src/util/myHashSet.h	/^      const Data& operator * () const { return *_data; }$/;"	f	class:HashSet::iterator
operator ++	include/myHashSet.h	/^      iterator operator ++ (int) {$/;"	f	class:HashSet::iterator
operator ++	include/myHashSet.h	/^      iterator& operator ++ () {$/;"	f	class:HashSet::iterator
operator ++	src/util/myHashSet.h	/^      iterator operator ++ (int) {$/;"	f	class:HashSet::iterator
operator ++	src/util/myHashSet.h	/^      iterator& operator ++ () {$/;"	f	class:HashSet::iterator
operator +=	src/task/taskMgr.h	/^   void operator += (size_t l) { _load += l; }$/;"	f	class:TaskNode
operator --	include/myHashSet.h	/^      iterator operator --(int) {$/;"	f	class:HashSet::iterator
operator --	include/myHashSet.h	/^      iterator& operator -- () {$/;"	f	class:HashSet::iterator
operator --	src/util/myHashSet.h	/^      iterator operator --(int) {$/;"	f	class:HashSet::iterator
operator --	src/util/myHashSet.h	/^      iterator& operator -- () {$/;"	f	class:HashSet::iterator
operator <	src/task/taskMgr.h	/^   bool operator < (const TaskNode& n) const { return _load < n._load; }$/;"	f	class:TaskNode
operator <<	src/task/taskMgr.cpp	/^ostream& operator << (ostream& os, const TaskNode& n)$/;"	f
operator =	include/myHashSet.h	/^      iterator& operator = (const iterator& i) { _data = i._data; _i = i._i; _j = i._j; return *this; }$/;"	f	class:HashSet::iterator
operator =	src/util/myHashSet.h	/^      iterator& operator = (const iterator& i) { _data = i._data; _i = i._i; _j = i._j; return *this; }$/;"	f	class:HashSet::iterator
operator ==	include/myHashSet.h	/^      bool operator == (const iterator& i) const { return _data == i._data; }$/;"	f	class:HashSet::iterator
operator ==	src/task/taskMgr.h	/^   bool operator == (const TaskNode& n) const { return _name == n._name; }$/;"	f	class:TaskNode
operator ==	src/util/myHashSet.h	/^      bool operator == (const iterator& i) const { return _data == i._data; }$/;"	f	class:HashSet::iterator
operator []	include/myHashSet.h	/^   const vector<Data>& operator [](size_t i) const { return _buckets[i]; }$/;"	f	class:HashSet
operator []	include/myHashSet.h	/^   vector<Data>& operator [] (size_t i) { return _buckets[i]; }$/;"	f	class:HashSet
operator []	include/myMinHeap.h	/^   Data& operator [] (size_t i) { return _data[i]; }$/;"	f	class:MinHeap
operator []	include/myMinHeap.h	/^   const Data& operator [] (size_t i) const { return _data[i]; }   $/;"	f	class:MinHeap
operator []	src/util/myHashSet.h	/^   const vector<Data>& operator [](size_t i) const { return _buckets[i]; }$/;"	f	class:HashSet
operator []	src/util/myHashSet.h	/^   vector<Data>& operator [] (size_t i) { return _buckets[i]; }$/;"	f	class:HashSet
operator []	src/util/myMinHeap.h	/^   Data& operator [] (size_t i) { return _data[i]; }$/;"	f	class:MinHeap
operator []	src/util/myMinHeap.h	/^   const Data& operator [] (size_t i) const { return _data[i]; }   $/;"	f	class:MinHeap
printAllHash	src/task/taskMgr.cpp	/^TaskMgr::printAllHash() const $/;"	f	class:TaskMgr
printAllHeap	src/task/taskMgr.cpp	/^TaskMgr::printAllHeap() const$/;"	f	class:TaskMgr
printPrompt	include/cmdParser.h	/^   void printPrompt() const { cout << _prompt; }$/;"	f	class:CmdParser
printPrompt	src/cmd/cmdParser.h	/^   void printPrompt() const { cout << _prompt; }$/;"	f	class:CmdParser
query	include/myHashSet.h	/^   bool query(Data& d) const {$/;"	f	class:HashSet
query	src/task/taskMgr.h	/^   bool query(TaskNode& n) { return _taskHash.query(n); }$/;"	f	class:TaskMgr
query	src/util/myHashSet.h	/^   bool query(Data& d) const {$/;"	f	class:HashSet
remove	include/myHashSet.h	/^   bool remove(const Data& d) {$/;"	f	class:HashSet
remove	src/task/taskMgr.cpp	/^TaskMgr::remove(const string& s)$/;"	f	class:TaskMgr
remove	src/task/taskMgr.cpp	/^TaskMgr::remove(size_t nMachines)$/;"	f	class:TaskMgr
remove	src/util/myHashSet.h	/^   bool remove(const Data& d) {$/;"	f	class:HashSet
removeData	include/util.h	/^void removeData(T& l, const D& d)$/;"	f
removeData	src/util/util.h	/^void removeData(T& l, const D& d)$/;"	f
report	include/myUsage.h	/^   void report(bool repTime, bool repMem) {$/;"	f	class:MyUsage
report	src/util/myUsage.h	/^   void report(bool repTime, bool repMem) {$/;"	f	class:MyUsage
reset	include/myHashSet.h	/^   void reset() {$/;"	f	class:HashSet
reset	include/myUsage.h	/^   void reset() {$/;"	f	class:MyUsage
reset	src/util/myHashSet.h	/^   void reset() {$/;"	f	class:HashSet
reset	src/util/myUsage.h	/^   void reset() {$/;"	f	class:MyUsage
resetBufAndPrintPrompt	include/cmdParser.h	/^   void resetBufAndPrintPrompt() {$/;"	f	class:CmdParser
resetBufAndPrintPrompt	src/cmd/cmdParser.h	/^   void resetBufAndPrintPrompt() {$/;"	f	class:CmdParser
reset_keypress	src/util/myGetChar.cpp	/^static void reset_keypress(void)$/;"	f	file:
setMemUsage	include/myUsage.h	/^   void setMemUsage() { _currentMem = checkMem() - _initMem; }$/;"	f	class:MyUsage
setMemUsage	src/util/myUsage.h	/^   void setMemUsage() { _currentMem = checkMem() - _initMem; }$/;"	f	class:MyUsage
setOptCmd	include/cmdParser.h	/^   void setOptCmd(const string& str) { _optCmd = str; }$/;"	f	class:CmdExec
setOptCmd	src/cmd/cmdParser.h	/^   void setOptCmd(const string& str) { _optCmd = str; }$/;"	f	class:CmdExec
setTimeUsage	include/myUsage.h	/^   void setTimeUsage() {$/;"	f	class:MyUsage
setTimeUsage	src/util/myUsage.h	/^   void setTimeUsage() {$/;"	f	class:MyUsage
set_keypress	src/util/myGetChar.cpp	/^static void set_keypress(void)$/;"	f	file:
size	include/myHashSet.h	/^   size_t size() const {$/;"	f	class:HashSet
size	include/myMinHeap.h	/^   size_t size() const { return _data.size(); }$/;"	f	class:MinHeap
size	src/task/taskMgr.h	/^   size_t size() const { return _taskHeap.size(); }$/;"	f	class:TaskMgr
size	src/util/myHashSet.h	/^   size_t size() const {$/;"	f	class:HashSet
size	src/util/myMinHeap.h	/^   size_t size() const { return _data.size(); }$/;"	f	class:MinHeap
stored_settings	src/util/myGetChar.cpp	/^static struct termios stored_settings;$/;"	v	typeref:struct:termios	file:
taTestOnly	include/cmdParser.h	/^   void taTestOnly() {}$/;"	f	class:CmdParser
taTestOnly	src/cmd/cmdParser.h	/^   void taTestOnly() {}$/;"	f	class:CmdParser
update	include/myHashSet.h	/^   bool update(const Data& d) {$/;"	f	class:HashSet
update	src/util/myHashSet.h	/^   bool update(const Data& d) {$/;"	f	class:HashSet
usage	src/main/main.cpp	/^usage()$/;"	f	file:
usage	src/task/taskCmd.cpp	/^TaskAssignCmd::usage(ostream& os) const$/;"	f	class:TaskAssignCmd
usage	src/task/taskCmd.cpp	/^TaskInitCmd::usage(ostream& os) const$/;"	f	class:TaskInitCmd
usage	src/task/taskCmd.cpp	/^TaskNewCmd::usage(ostream& os) const$/;"	f	class:TaskNewCmd
usage	src/task/taskCmd.cpp	/^TaskQueryCmd::usage(ostream& os) const$/;"	f	class:TaskQueryCmd
usage	src/task/taskCmd.cpp	/^TaskRemoveCmd::usage(ostream& os) const$/;"	f	class:TaskRemoveCmd
~CmdExec	include/cmdParser.h	/^   virtual ~CmdExec() {}$/;"	f	class:CmdExec
~CmdExec	src/cmd/cmdParser.h	/^   virtual ~CmdExec() {}$/;"	f	class:CmdExec
~CmdParser	include/cmdParser.h	/^   virtual ~CmdParser() {}$/;"	f	class:CmdParser
~CmdParser	src/cmd/cmdParser.h	/^   virtual ~CmdParser() {}$/;"	f	class:CmdParser
~HashSet	include/myHashSet.h	/^   ~HashSet() { reset(); }$/;"	f	class:HashSet
~HashSet	src/util/myHashSet.h	/^   ~HashSet() { reset(); }$/;"	f	class:HashSet
~MinHeap	include/myMinHeap.h	/^   ~MinHeap() {}$/;"	f	class:MinHeap
~MinHeap	src/util/myMinHeap.h	/^   ~MinHeap() {}$/;"	f	class:MinHeap
~TaskMgr	src/task/taskMgr.h	/^   ~TaskMgr() {}$/;"	f	class:TaskMgr
~TaskNode	src/task/taskMgr.h	/^   ~TaskNode() {}$/;"	f	class:TaskNode
~iterator	include/myHashSet.h	/^      ~iterator() {}$/;"	f	class:HashSet::iterator
~iterator	src/util/myHashSet.h	/^      ~iterator() {}$/;"	f	class:HashSet::iterator
